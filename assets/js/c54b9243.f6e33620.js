"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[7219],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?i.createElement(g,o(o({ref:t},c),{},{components:n})):i.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:5,description:"Using the built-in OCI registry",title:"Local OCI Registry",index:5},o=void 0,l={unversionedId:"reference-implementation/installations/idpbuilder/local-oci-registry",id:"reference-implementation/installations/idpbuilder/local-oci-registry",title:"Local OCI Registry",description:"Using the built-in OCI registry",source:"@site/docs/reference-implementation/installations/idpbuilder/local-oci-registry.md",sourceDirName:"reference-implementation/installations/idpbuilder",slug:"/reference-implementation/installations/idpbuilder/local-oci-registry",permalink:"/docs/reference-implementation/installations/idpbuilder/local-oci-registry",draft:!1,editUrl:"https://github.com/cnoe-io/website/tree/main/docs/reference-implementation/installations/idpbuilder/local-oci-registry.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Using the built-in OCI registry",title:"Local OCI Registry",index:5},sidebar:"tutorialSidebar",previous:{title:"Override built-in services",permalink:"/docs/reference-implementation/installations/idpbuilder/override"},next:{title:"Troubleshooting",permalink:"/docs/reference-implementation/installations/idpbuilder/troubleshooting"}},s={},u=[{value:"Path Based Routing",id:"path-based-routing",level:3},{value:"Image Tags",id:"image-tags",level:3},{value:"Pulling Images",id:"pulling-images",level:3},{value:"No Pull Secret Needed",id:"no-pull-secret-needed",level:4},{value:"Referencing Images In Manifests On The Idpbuilder K8s Cluster",id:"referencing-images-in-manifests-on-the-idpbuilder-k8s-cluster",level:3},{value:"Pulling Images From Inside Idpbuilder K8s Cluster:",id:"pulling-images-from-inside-idpbuilder-k8s-cluster",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'The local Gitea instance created by idpbuilder contains a built-in OCI registry for hosting container images as "packages" in Gitea nomenclature.'),(0,a.kt)("p",null,"It is a standard OCI registry, so the API should be compatible with any tools that are OCI compliant. That includes the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker")," cli."),(0,a.kt)("p",null,"For example, you can push an image by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker login gitea.cnoe.localtest.me:8443                                          \n# see the note section below for retrieving your password.\nUsername: giteaAdmin\nPassword: \n\n# you can build your own image instead of pulling.\ndocker pull docker.io/library/ubuntu:24.04 \ndocker tag docker.io/library/ubuntu:24.04 gitea.cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\n\ndocker push gitea.cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"NOTE"),": You can get the giteaAdmin password in the same way as you do for the web or git interface."),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"idpbuilder get secrets -p gitea")),(0,a.kt)("p",{parentName:"blockquote"},"Or you can use this to login directly:"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre"},"idpbuilder get secrets -p gitea -o json | \\\n  jq '.[0].data.password' -r | \\\n  docker login -u giteaAdmin --password-stdin gitea.cnoe.localtest.me:8443\n"))),(0,a.kt)("h3",{id:"path-based-routing"},"Path Based Routing"),(0,a.kt)("p",null,"You can also use the OCI registry with path based routing mode (the ",(0,a.kt)("inlineCode",{parentName:"p"},"--use-path-routing")," flag).\nWhen using this flag, you need to specify the host as ",(0,a.kt)("inlineCode",{parentName:"p"},"cnoe.localtest.me:8443"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# get the admin user password\nidbuilder get secrets -p gitea\n\n# login\ndocker login cnoe.localtest.me:8443\n# Username (giteaAdmin): giteaAdmin\n# Password:\n\n# test with the ubuntu 24.04 image\ndocker pull docker.io/library/ubuntu:24.04 \ndocker tag docker.io/library/ubuntu:24.04 cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\ndocker push cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\n\n")),(0,a.kt)("h3",{id:"image-tags"},"Image Tags"),(0,a.kt)("p",null,"Images pushed to Gitea OCI registry must be tagged with the following naming convention: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{registry}/{owner}/{image}\n")),(0,a.kt)("p",null,"For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"gitea.cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04")),(0,a.kt)("p",null,"This is a naming convention enforced by Gitea. Please see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.gitea.com/usage/packages/container"},"the Gitea documentation")," for more information."),(0,a.kt)("h3",{id:"pulling-images"},"Pulling Images"),(0,a.kt)("p",null,"You can pull an image back to your local machine using your docker client like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker pull gitea.cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\n")),(0,a.kt)("h4",{id:"no-pull-secret-needed"},"No Pull Secret Needed"),(0,a.kt)("p",null,"The Gitea instance allows for anonymous read access. This means that you can pull git repo contents and container images without logging in."),(0,a.kt)("h3",{id:"referencing-images-in-manifests-on-the-idpbuilder-k8s-cluster"},"Referencing Images In Manifests On The Idpbuilder K8s Cluster"),(0,a.kt)("p",null,"You can create a pod or a deployment that references images in the local registry. For example, to create a pod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  namespace: default\n  name: debug-pod\nspec:\n  containers:\n    - image: gitea.cnoe.localtest.me:8443/giteaadmin/ubuntu:24.04\n      name: debug-pod\n      command:\n        - sleep\n        - "3600"\n')),(0,a.kt)("h3",{id:"pulling-images-from-inside-idpbuilder-k8s-cluster"},"Pulling Images From Inside Idpbuilder K8s Cluster:"),(0,a.kt)("p",null,"Because we are using an NGINX Ingress and pushing our image from off cluster,\nGitea and its OCI registry think all images pushed to it are prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"gitea.cnoe.localtest.me:8443"),"."),(0,a.kt)("p",null,"This is correct by the OCI spec standards. However, when you are on the cluster, that ingress is not available to you.\nYou can use the service name of gitea, but gitea will not know what images are being asked for at the svc domain name. To work around this issue, we use containerd to rewrite those image names so that they can be referenced at the external url:"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/idpbuilder/blob/main/pkg/kind/resources/kind.yaml.tmpl"},"the Kind config")," for how this is done."))}d.isMDXComponent=!0}}]);