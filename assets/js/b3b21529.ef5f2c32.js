"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[1802],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3427:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1,description:"launch the CNOE IDP with a single binary",title:"idpBuilder on Local Machine",index:1},l=void 0,o={unversionedId:"reference-implementation/installations/idpbuilder/idpbuilder",id:"reference-implementation/installations/idpbuilder/idpbuilder",title:"idpBuilder on Local Machine",description:"launch the CNOE IDP with a single binary",source:"@site/docs/reference-implementation/installations/idpbuilder/idpbuilder.md",sourceDirName:"reference-implementation/installations/idpbuilder",slug:"/reference-implementation/installations/idpbuilder/",permalink:"/docs/reference-implementation/installations/idpbuilder/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/installations/idpbuilder/idpbuilder.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"launch the CNOE IDP with a single binary",title:"idpBuilder on Local Machine",index:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/category/getting-started"},next:{title:"Amazon EKS",permalink:"/docs/reference-implementation/installations/app-idp"}},p={},s=[{value:"About",id:"about",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Using the idpbuilder",id:"using-the-idpbuilder",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Example commands",id:"example-commands",level:3},{value:"Custom Packages",id:"custom-packages",level:3},{value:"Running in Codespaces",id:"running-in-codespaces",level:2},{value:"Extending the IDP builder",id:"extending-the-idp-builder",level:2}],c={toc:s};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"about"},"About"),(0,r.kt)("admonition",{title:"GitHub Repo",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/idpbuilder"},"cnoe-io/idpbuilder"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"WORK IN PROGRESS"),": This tool is in a pre-release stage and is under active development.")),(0,r.kt)("p",null,"Spin up a complete internal developer platform using industry standard technologies like Kubernetes, Argo, and backstage with only Docker required as a dependency."),(0,r.kt)("p",null,"This can be useful in several ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a single binary which can demonstrate an IDP reference implementation."),(0,r.kt)("li",{parentName:"ul"},"Use within CI to perform integration testing."),(0,r.kt)("li",{parentName:"ul"},"Use as a local development environment for IDP engineers.")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"A container engine is needed locally, such as:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Supported"),(0,r.kt)("th",{parentName:"tr",align:null},"Remark"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.docker.com/get-started/"},"Docker desktop")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://podman-desktop.io/"},"Podman desktop")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"idpbuilder can create a cluster using podman ",(0,r.kt)("a",{parentName:"td",href:"https://docs.podman.io/en/latest/markdown/podman-machine-set.1.html#rootful"},"rootful"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://runfinch.com/"},"Finch")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"DOCKER_HOST")," env var property using ",(0,r.kt)("inlineCode",{parentName:"p"},"podman"),' to let idpbuilder to talk with the engine (e.g  export DOCKER_HOST="unix:///var/run/docker.sock")'),(0,r.kt)("h2",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"You can execute the following bash script to get started with a running version of the idpBuilder (inspect the script first if you have concerns):"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"curl -fsSL https://raw.githubusercontent.com/cnoe-io/idpbuilder/main/hack/install.sh | bash\n"))),(0,r.kt)("p",null,"verify a successful installation by running the following command and inspecting the output for the right version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"idpbuilder version\n")),(0,r.kt)("p",null,"Alternatively, you can run the following commands for a manual installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"version=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/cnoe-io/idpbuilder/releases/latest)\nversion=${version##*/}\ncurl -L -o ./idpbuilder.tar.gz \"https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz\"\ntar xzf idpbuilder.tar.gz\n\n./idpbuilder version\n# example output\n# idpbuilder 0.4.1 go1.21.5 linux/amd64\n")),(0,r.kt)("p",null,"Or, you can download the latest binary from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/idpbuilder/releases/latest"},"the release page"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you are interested in running idpbuilder in Codespaces through your browser, check out the ",(0,r.kt)("a",{parentName:"p",href:"#running-in-codespaces"},"Codespaces")," section.")),(0,r.kt)("h2",{id:"using-the-idpbuilder"},"Using the idpbuilder"),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"The most basic command which creates a Kubernetes Cluster (Kind cluster) with the core packages installed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./idpbuilder create\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What are the core packages?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ArgoCD")," is the GitOps solution to deploy manifests to Kubernetes clusters. In this project, a package is an ArgoCD application. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Gitea")," server is the in-cluster Git server that ArgoCD can be configured to sync resources from. You can sync from local file systems to this.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Ingress-nginx")," is used as a method to access in-cluster resources such as ArgoCD UI and Gitea UI."),(0,r.kt)("h4",{parentName:"li",id:"core-package-versions"},"Core package versions"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Argo CD"),(0,r.kt)("td",{parentName:"tr",align:null},"v2.10.7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Gitea"),(0,r.kt)("td",{parentName:"tr",align:null},"v9.5.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nginx"),(0,r.kt)("td",{parentName:"tr",align:null},"v1.8.1")))),(0,r.kt)("p",{parentName:"li"},"The default manifests for the core packages are available ",(0,r.kt)("a",{parentName:"p",href:"pkg/controllers/localbuild/resources"},"here"),".\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/idpbuilder/blob/main/CONTRIBUTING.md"},"contribution doc")," for more information on how core packages are installed and configured.")))),(0,r.kt)("p",null,"Once idpbuilder finishes provisioning cluster and packages, you can access GUIs by going to the following addresses in your browser."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ArgoCD: ",(0,r.kt)("a",{parentName:"li",href:"https://cnoe.localtest.me:8443/argocd/"},"https://cnoe.localtest.me:8443/argocd/")),(0,r.kt)("li",{parentName:"ul"},"Gitea: ",(0,r.kt)("a",{parentName:"li",href:"https://cnoe.localtest.me:8443/gitea/"},"https://cnoe.localtest.me:8443/gitea/"))),(0,r.kt)("p",null,"You can obtain credentials for them by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./idpbuilder get secrets\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,' The "get secrets" command '),(0,r.kt)("p",null,"  The ",(0,r.kt)("inlineCode",{parentName:"p"},"get secrets")," command retrieves the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ArgoCD initial admin password.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Gitea admin user credentials.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Any secrets labeled with ",(0,r.kt)("inlineCode",{parentName:"p"},"cnoe.io/cli-secret=true"),"."),(0,r.kt)("p",{parentName:"li"},"You can think of the command as executing the following kubectl commands:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n argocd get secret argocd-initial-admin-secret\nkubectl get secrets -n gitea gitea-admin-secret\nkubectl get secrets -A -l cnoe.io/cli-secret=true\n")),(0,r.kt)("p",{parentName:"li"},"In addition, secrets labeled with ",(0,r.kt)("inlineCode",{parentName:"p"},"cnoe.io/package-name")," can be specified with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-p")," flag. For example, for Gitea:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./idpbuilder get secrets -p gitea\n"))))),(0,r.kt)("h3",{id:"example-commands"},"Example commands"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For more advanced use cases, check out the ",(0,r.kt)("a",{parentName:"strong",href:"./examples"},"examples")," directory.")),(0,r.kt)("p",null,"You can specify the kubernetes version by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--kube-version")," flag. Supported versions are available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/kind/releases"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./idpbuilder create --kube-version v1.27.3\n")),(0,r.kt)("p",null,"If you want to specify your own kind configuration file, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--kind-config")," flag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./idpbuilder create --build-name local --kind-config ./my-kind.yaml`\n")),(0,r.kt)("p",null,"If you want to specify ArgoCD configmap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./idpbuilder create --package-custom-file=argocd:pkg/k8s/test-resources/input/argocd-cm.yaml\n")),(0,r.kt)("p",null,"Run the following commands for available flags and subcommands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./idpbuilder --help\n./idpbuilder create --help\n")),(0,r.kt)("h3",{id:"custom-packages"},"Custom Packages"),(0,r.kt)("p",null,"Idpbuilder supports specifying custom packages using the flag ",(0,r.kt)("inlineCode",{parentName:"p"},"--package-dir")," flag. This flag expects a directory containing ArgoCD application files."),(0,r.kt)("p",null,"Let's take a look at ",(0,r.kt)("a",{parentName:"p",href:"examples/basic"},"this example"),". This example defines two custom package directories to deploy to the cluster."),(0,r.kt)("p",null,"To deploy these packages, run the following commands from this repository's root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./idpbuilder create --package-dir examples/basic/package1  --package-dir examples/basic/package2\n")),(0,r.kt)("p",null,"Running this command should create three additional ArgoCD applications in your cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ kubectl get Applications -n argocd  -l example=basic\nNAME         SYNC STATUS   HEALTH STATUS\nguestbook    Synced        Healthy\nguestbook2   Synced        Healthy\nmy-app       Synced        Healthy\n")),(0,r.kt)("p",null,"Let's break this down. The ",(0,r.kt)("a",{parentName:"p",href:"examples/basic/package1"},"first package directory")," defines an application. This corresponds to the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-app")," application above. In this application, we want to deploy manifests from local machine in GitOps way."),(0,r.kt)("p",null,"The directory contains an ",(0,r.kt)("a",{parentName:"p",href:"examples/basic/package1/app.yaml"},"ArgoCD application file"),". This is a normal ArgoCD application file except for one field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    repoURL: cnoe://manifests\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"cnoe://")," prefix in the ",(0,r.kt)("inlineCode",{parentName:"p"},"repoURL")," field indicates that we want to sync from a local directory.\nValues after ",(0,r.kt)("inlineCode",{parentName:"p"},"cnoe://")," is treated as a relative path from this file. In this example, we are instructing idpbuilder to make ArgoCD sync from files in the ",(0,r.kt)("a",{parentName:"p",href:"examples/basic/package1/manifests"},"manifests directory"),"."),(0,r.kt)("p",null,"As a result the following actions were taken by idpbuilder: "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a Gitea repository."),(0,r.kt)("li",{parentName:"ol"},"Fill the repository with contents from the manifests directory."),(0,r.kt)("li",{parentName:"ol"},"Update the Application spec to use the newly created repository.")),(0,r.kt)("p",null,"You can verify this by going to this address in your browser: ",(0,r.kt)("a",{parentName:"p",href:"https://gitea.cnoe.localtest.me:8443/giteaAdmin/idpbuilder-localdev-my-app-manifests"},"https://gitea.cnoe.localtest.me:8443/giteaAdmin/idpbuilder-localdev-my-app-manifests")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img.png",src:a(9750).Z,width:"1003",height:"384"})),(0,r.kt)("p",null,"This is the repository that corresponds to the ",(0,r.kt)("a",{parentName:"p",href:"examples/basic/package1/manifests"},"manifests")," folder.\nIt contains a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine.yaml"),", synced from the ",(0,r.kt)("inlineCode",{parentName:"p"},"manifests")," directory above."),(0,r.kt)("p",null,"You can also view the updated Application spec by going to this address: ",(0,r.kt)("a",{parentName:"p",href:"https://argocd.cnoe.localtest.me:8443/applications/argocd/my-app"},"https://argocd.cnoe.localtest.me:8443/applications/argocd/my-app")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"myapp",src:a(9700).Z,width:"1065",height:"405"})),(0,r.kt)("p",null,"The second package directory defines two normal ArgoCD applications referencing a remote repository.\nThey are applied as-is."),(0,r.kt)("h2",{id:"running-in-codespaces"},"Running in Codespaces"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a Codespaces instance. ",(0,r.kt)("img",{alt:"img",src:a(6661).Z,width:"993",height:"554"})),(0,r.kt)("li",{parentName:"ol"},"Wait for it to be ready. It may take several minutes."),(0,r.kt)("li",{parentName:"ol"},"Get the latest release of idpbuilder:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," version=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/cnoe-io/idpbuilder/releases/latest)\n version=${version##*/}\n curl -L -o ./idpbuilder.tar.gz \"https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz\"\n tar xzf idpbuilder.tar.gz\n"))),(0,r.kt)("li",{parentName:"ol"},"Run idpbuilder:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"}," idpbuilder create --protocol http  \\\n --host ${CODESPACE_NAME}-8080.${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN} \\\n --port 8080 --use-path-routing\n"))),(0,r.kt)("li",{parentName:"ol"},"Because Codespaces gives a single externally routable host name for an instance, idpbuilder must deploy with path based routing.\nThis means ArgoCD and Gitea UIs are given with the following commands.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ArgoCD: ",(0,r.kt)("inlineCode",{parentName:"li"},"echo https://${CODESPACE_NAME}-8080.${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN}/argocd")),(0,r.kt)("li",{parentName:"ul"},"Gitea: ",(0,r.kt)("inlineCode",{parentName:"li"},"echo https://${CODESPACE_NAME}-8080.${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN}/gitea")))),(0,r.kt)("li",{parentName:"ol"},"Note that not all examples work with path based routing. ")),(0,r.kt)("h2",{id:"extending-the-idp-builder"},"Extending the IDP builder"),(0,r.kt)("p",null,"We are actively working to include more patterns and examples of extending idpbuilder to get started easily."))}d.isMDXComponent=!0},6661:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/codespaces-create-8408d32852051c5e4cbad51cde41dc4c.png"},9750:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/my-app-repo-bb4d8740fb103272bb6fc355d14260f5.png"},9700:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/my-app-4fd46870df4fab797e1b7f7862bebace.png"}}]);