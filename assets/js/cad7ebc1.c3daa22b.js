"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[8902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||s;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4952:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const s={sidebar_position:1,description:"utilizing CNOE with secrets",title:"Secret Management"},o=void 0,i={unversionedId:"reference-implementation/configs/secrets",id:"reference-implementation/configs/secrets",title:"Secret Management",description:"utilizing CNOE with secrets",source:"@site/docs/reference-implementation/configs/secrets.md",sourceDirName:"reference-implementation/configs",slug:"/reference-implementation/configs/secrets",permalink:"/docs/reference-implementation/configs/secrets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/configs/secrets.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"utilizing CNOE with secrets",title:"Secret Management"},sidebar:"tutorialSidebar",previous:{title:"Infrastructure Control Plane",permalink:"/docs/reference-implementation/configs/control-plane"},next:{title:"Plugins",permalink:"/docs/category/plugins"}},c={},l=[{value:"External Secrets Operator",id:"external-secrets-operator",level:2},{value:"TLS Certificates",id:"tls-certificates",level:2}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"external-secrets-operator"},"External Secrets Operator"),(0,a.kt)("p",null,"If your organization requires sensitive data to be stored in a secret store such as Vault and Secrets Manager, you may need a way to retrieve secrets from your secret store into your cluster. ",(0,a.kt)("a",{parentName:"p",href:"https://external-secrets.io/latest/introduction/overview/"},"External Secrets Operator")," is a Kubernetes Operator that fetches secrets from external APIs and creates Kubernetes secrets."),(0,a.kt)("p",null,"The reference implementation uses this operator to sync secrets between the cluster and AWS Secrets Manager. Information such as generated user password, Keycloak admin password, and database password are stored as an entity in AWS secrets manager. "),(0,a.kt)("h2",{id:"tls-certificates"},"TLS Certificates"),(0,a.kt)("p",null,"If you opted to use cert manager to manage certificates for you endpoints, certificates and their private keys are stored as Kubernetes secrets. If this does not meet your security standard, you can store it in a secret store of your choice, then use External Secrets Operator to sync it. An example manifest for Secrets Manager would look something like this. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: backstage-prod-tls\n  namespace: backstage\nspec:\n  refreshInterval: 12h\n  secretStoreRef:\n    name: keycloak\n    kind: SecretStore\n  target:\n    name: backstage-prod-tls\n    template:\n      type: kubernetes.io/tls\n      data:\n        tls.crt: "{{ .public }}"\n        tls.key: "{{ .private }}"\n  data:\n    - secretKey: private\n      remoteRef:\n        key: cnoe/tls/dev # path to the tls cert in Secrets Manager\n        property: PRIVATE_KEY\n    - secretKey: public\n      remoteRef:\n        key: cnoe/tls/dev\n        property: CERT\n')),(0,a.kt)("p",null,"When removing the reference implementation installation from your cluster, the uninstall script will back up the secrets to a local directory. This is to avoid re-issuing Let's Encrypt certificate for the same host because Let's Encrypt has a limit on how many times you can request certificates in a given time."))}u.isMDXComponent=!0}}]);