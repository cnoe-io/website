"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[4914],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=i,g=u["".concat(c,".").concat(d)]||u[d]||f[d]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3,description:"Verifying Deployments",title:"Verifications"},o=void 0,s={unversionedId:"reference-implementation/integrations/verification",id:"reference-implementation/integrations/verification",title:"Verifications",description:"Verifying Deployments",source:"@site/docs/reference-implementation/integrations/verification.md",sourceDirName:"reference-implementation/integrations",slug:"/reference-implementation/integrations/verification",permalink:"/docs/reference-implementation/integrations/verification",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/integrations/verification.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Verifying Deployments",title:"Verifications"},sidebar:"tutorialSidebar",previous:{title:"Templating of Terraform Modules",permalink:"/docs/reference-implementation/integrations/generated/tf-templating"},next:{title:"Configurations",permalink:"/docs/category/configurations"}},c={},l=[{value:"Writing a Verification Template",id:"writing-a-verification-template",level:2},{value:"Running Verifications",id:"running-verifications",level:2},{value:"via the CNOE CLI",id:"via-the-cnoe-cli",level:3},{value:"via the Backend Scaffolder",id:"via-the-backend-scaffolder",level:3}],p={toc:l};function u(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Verifications play a key role in ensuring successful rollouts in an IDP.\nVerifications are done external to the target Kubernetes cluster and perform\nreadiness and dependency checks against the target cluster."),(0,i.kt)("p",null,"CNOE supports running verifications either by using the CNOE CLIE, or\nby embedding them into the Backstage workflow as a ",(0,i.kt)("inlineCode",{parentName:"p"},"verify")," step in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference-implementation/plugins/scaffolder-backend"},"Scaffolder Backend Plugin"),"."),(0,i.kt)("p",null,"CNOE supports the following (growing) list of verifications:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"availability of required CRDs in a target Kubernetes cluster"),(0,i.kt)("li",{parentName:"ul"},"readiness of operators in a target Kubernetes cluster")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"full specification for the verification templates is available in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/cnoe-cli/tree/main/config/templates"},"the CNOE CLI\nrepo"),". ")),(0,i.kt)("h2",{id:"writing-a-verification-template"},"Writing a Verification Template"),(0,i.kt)("p",null,"Below is a sample\nspec for a prerequisite ensuring that the ",(0,i.kt)("a",{parentName:"p",href:"https://aws-controllers-k8s.github.io/community/"},"Amazon Controllers for Kubernetes"),"\nS3 controller is installed and running in a target cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: cnoe.io/v1alpha1\nkind: Prerequisite\nmetadata:\n  name: ack-s3\n  annotations:\n  - test: something\n  - another: something\nspec:\n  pods:\n  - name: ack-release-s3\n    namespace: ack-system\n    state: Running\n  crds:\n  - group: s3.services.k8s.aws\n    version: v1alpha1\n    kind: Buckets\n  - group: acme.cert-manager.io\n    kind: Challenges\n    version: v1\n  - group: services.k8s.aws\n    kind: AdoptedResources\n    version: v1alpha1\n  - group: services.k8s.aws\n    kind: FieldExports\n    version: v1alpha1\n  - group: vpcresources.k8s.aws\n    kind: SecurityGroupPolicies\n    version: v1beta1\n")),(0,i.kt)("h2",{id:"running-verifications"},"Running Verifications"),(0,i.kt)("h3",{id:"via-the-cnoe-cli"},"via the CNOE CLI"),(0,i.kt)("p",null,"The CLI support running verifications against a target cluster by running the\ncommand ",(0,i.kt)("inlineCode",{parentName:"p"},"./cnoe k8s verify"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u276f ./cnoe k8s verify -h\nVerify if the required resources and controllers are working as expected\n\nUsage:\n  cnoe k8s verify [flags]\n\nFlags:\n  -c, --config stringArray   list of prerequisite configurations (samples under config/prereq)\n  -h, --help                 help for verify\n\nGlobal Flags:\n  -k, --kubeconfig string   path to the kubeconfig file (default "~/.kube/config")\n')),(0,i.kt)("p",null,"Below is an example successful output of running ",(0,i.kt)("inlineCode",{parentName:"p"},"verify")," against a target cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u276f ./cnoe k8s verify --config config/prereq/ack-s3-prerequisites.yaml\n\u2713 ack-s3 - s3.services.k8s.aws/v1alpha1, Kind=Buckets\n\u2713 ack-s3 - acme.cert-manager.io/v1, Kind=Challenges\n\u2713 ack-s3 - services.k8s.aws/v1alpha1, Kind=AdoptedResources\n\u2713 ack-s3 - services.k8s.aws/v1alpha1, Kind=FieldExports\n\u2713 ack-s3 - vpcresources.k8s.aws/v1beta1, Kind=SecurityGroupPolicies\n\u2713 ack-s3 - ack-system, Pod=ack-release-s3-chart-8f76bf8bb-nm9wv - Running\n")),(0,i.kt)("p",null,"And when things fail:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u276f ./cnoe k8s verify --config config/prereq/bad-spark-prerequisites.yaml\nX bad-spark - sparkoperator.k8s.io/v2beta2, Kind=SparkApplication\nX bad-spark -  Pod=sprk-operator\n2 errors occurred:\n        * sparkoperator.k8s.io/v2beta2, Kind=SparkApplication not found\n        *  Pod=sprk-operator not found\n")),(0,i.kt)("h3",{id:"via-the-backend-scaffolder"},"via the Backend Scaffolder"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Running the verification phase from within CNOE is still experimental and\nrequires the presence of the CNOE CLI binary on the container image for\nBackstage, where it is configured to target the desired cluster.")),(0,i.kt)("p",null,"The backend scaffolder plugin implements a step where the CNOE CLI can be called\nwith reference to the respective Prerequisite check that needs to be run against\nthe target cluster prior to installing resources."),(0,i.kt)("p",null,"In case of a S3 resource that is enabled via the Amazon Controllers for\nKubernetes (ACK), this would be a check that verifies the existence of the\nrelevant CRDs as well as ensuring that the ACK S3 Controller is present and\nrunning."),(0,i.kt)("p",null,"In case of a failure, the Backstage scaffolder halts the execution flow and\nshows the exact error reporting that the CNOE CLI reports upon execution from\nwithin the terminal (see below):"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"verify",src:t(7259).Z,width:"1320",height:"874"})),(0,i.kt)("p",null,"In case of a successful verification, the verify step would finish execution\nwith an exit code 0 and allow for the rest of the steps to proceed:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"deploy",src:t(5470).Z,width:"789",height:"472"})))}u.isMDXComponent=!0},5470:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/7-deploy-resource-6cb3b585e1ceec63c255becc25d60356.png"},7259:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/verify-a4657db9cf6395b592a49e6b98b6569b.png"}}]);