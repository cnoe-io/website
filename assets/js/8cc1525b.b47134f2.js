"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[464],{3587:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/5-init-resource-5643b5a08848f148a6426c92294a8830.png"},3967:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/backstage-tf-input-field-d33c7bee35e0fe18bad1f17a901937e7.png"},22776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorials/backstage-template/backstage-template","title":"Generate CNOE Backstage template","description":"Generate CNOE Backstage template","source":"@site/docs/tutorials/backstage-template/backstage-template.md","sourceDirName":"tutorials/backstage-template","slug":"/tutorials/backstage-template/","permalink":"/docs/tutorials/backstage-template/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2.3,"frontMatter":{"sidebar_position":2.3,"description":"Generate CNOE Backstage template","title":"Generate CNOE Backstage template","index":1},"sidebar":"tutorialSidebar","previous":{"title":"Create GO App with S3 Bucket","permalink":"/docs/tutorials/aws/app-with-aws-resources"},"next":{"title":"Explore Backstage Plugins in CNOE","permalink":"/docs/tutorials/plugin/"}}');var s=n(74848),i=n(28453);const r={sidebar_position:2.3,description:"Generate CNOE Backstage template",title:"Generate CNOE Backstage template",index:1},o=void 0,l={},c=[{value:"Install CNOE CLI",id:"install-cnoe-cli",level:2},{value:"Generate CNOE Backstage Template",id:"generate-cnoe-backstage-template",level:2},{value:"Using CRD/XRDs",id:"using-crdxrds",level:3},{value:"Step-1",id:"step-1",level:4},{value:"Step-2",id:"step-2",level:4},{value:"Step-3",id:"step-3",level:4},{value:"Using Terraform",id:"using-terraform",level:3},{value:"Template Generation",id:"template-generation",level:4},{value:"Example",id:"example",level:4},{value:"Verification",id:"verification",level:2},{value:"Writing a Verification Template",id:"writing-a-verification-template",level:3},{value:"Running Verifications",id:"running-verifications",level:3},{value:"via the CNOE CLI",id:"via-the-cnoe-cli",level:4},{value:"via the Backend Scaffolder",id:"via-the-backend-scaffolder",level:4}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"CNOE enhances your Backstage implementation by providing seamless integrations and tooling that help platform engineers and developers be more productive."}),"\n",(0,s.jsx)(t.h2,{id:"install-cnoe-cli",children:"Install CNOE CLI"}),"\n",(0,s.jsx)(t.p,{children:"The CNOE CLI is a powerful tool designed to enhance Internal Developer Platform (IDP) experiences by streamlining developer workflows through Kubernetes integration. It offers advanced templating capabilities that can automatically convert Kubernetes CRDs and Crossplane XRDs into Backstage templates, making it particularly valuable for organizations with custom Kubernetes controllers. The tool excels at transforming complex resources into user-friendly templates and supports bulk conversion with customizable parameters. By bridging the gap between developer workflows and underlying infrastructure, CNOE CLI helps organizations build cohesion in their development processes and simplify the migration of workflows to their developer portal, while adding necessary verifications and extensions."}),"\n",(0,s.jsxs)(t.p,{children:["Follow ",(0,s.jsx)(t.a,{href:"https://github.com/cnoe-io/cnoe-cli",children:"cnoe-io/cnoe-cli"})," documentation to install."]}),"\n",(0,s.jsx)(t.h2,{id:"generate-cnoe-backstage-template",children:"Generate CNOE Backstage Template"}),"\n",(0,s.jsxs)(t.p,{children:["You pick the option you want to use to generate the templates. Here we are demonstrating with two examples one using ",(0,s.jsx)(t.a,{href:"#using-crdxrds",children:"CRD"})," and other with ",(0,s.jsx)(t.a,{href:"#using-terraform",children:"Terraform"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"using-crdxrds",children:"Using CRD/XRDs"}),"\n",(0,s.jsxs)(t.p,{children:["As shown below, the ",(0,s.jsx)(t.code,{children:"./cnoe template crd"})," command allows you to specify an input\ndirectory for stored CRD specifications, the template that needs to be populated\nwith the list of converted CRDs, and configuration knobs to set the\nname, title, and description of the generated template."]}),"\n",(0,s.jsx)(t.p,{children:"The generated templates are stored in the defined output directory."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Generate backstage templates from supplied CRD and XRD definitions\n\nUsage:\n  cnoe template crd [flags]\n\nFlags:\n  -h, --help                         help for crd\n      --templateDescription string   sets the description of the template\n      --templateName string          sets the name of the template\n      --templateTitle string         sets the title of the template\n  -v, --verifier stringArray         list of verifiers to test the resource against\n\nGlobal Flags:\n  -c, --collapse             if set to true, items are rendered and collapsed as drop down items in a single specified template\n      --depth uint32          depth from given directory to search for TF modules or CRDs (default 2)\n  -i, --inputDir string       input directory for CRDs and XRDs to be templatized\n  -p, --insertAt string       jq path within the template to insert backstage info (default ".spec.parameters[0]")\n  -o, --outputDir string      output directory for backstage templates to be stored in\n      --raw templatePath      prints the raw open API output without putting it into a template (ignoring templatePath and `insertAt`)\n  -t, --templatePath string   path to the template to be augmented with backstage info\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this example we will show how to generate Backstage template for ACK Controllers. You require the list of CRDs that you want to convert, and a Backstage template. For this example, let us look at the CRDs available in the ",(0,s.jsx)(t.a,{href:"https://github.com/cnoe-io/cnoe-cli/tree/main/examples",children:"CNOE CLI repository"})," in particular, the CRDs for ",(0,s.jsx)(t.a,{href:"https://github.com/aws-controllers-k8s",children:"Amazon Controllers for Kubernetes (ACK)"}),". There is approximately 120 sample ACK CRDs in the ",(0,s.jsx)(t.a,{href:"https://github.com/cnoe-io/cnoe-cli/tree/main/examples/ack-crds",children:"example repo"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"step-1",children:"Step-1"}),"\n",(0,s.jsx)(t.p,{children:"First create the Backstage Scaffolding Template. You can choose a scaffolding template of your choice to pass to the tool for it to augment it with the list of converted CRD elements. For this example we choose the k8s-apply-template available in the CNOE CLI repository."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: deploy-resources\n  title: Deploy Resources\n  description: Deploy Resource to Kubernetes\nspec:\n  owner: guest\n  type: service\n  # these are the steps which are rendered in the frontend with the form input\n  parameters:\n    - title: Choose AWS Resources\n      description: Select a AWS resource to add to your repository.\n      properties:\n        path:\n          type: string\n          description: path to place this file into\n          default: kustomize/base\n        name:\n          type: string\n          description: name of this resource. This will be the name of K8s object.\n      required:\n        - awsResources\n        - name\n  steps:\n    - id: serialize\n      name: serialize\n      action: roadiehq:utils:serialize:yaml\n      input:\n        data:\n          apiVersion: ${{ parameters.apiVersion }}\n          kind: ${{ parameters.kind }}\n          metadata:\n            name: ${{ parameters.name }}\n            namespace: ${{ parameters.namespace }}\n          spec: ${{ parameters.config }}\n    - id: sanitize\n      name: sanitize\n      action: cnoe:utils:sanitize\n      input:\n        document: ${{ steps['serialize'].output.serialized }}\n    - id: apply\n      name: apply-manifest\n      action: cnoe:kubernetes:apply\n      input:\n        namespaced: true\n        manifest: ${{ steps['sanitize'].output.sanitized }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"metadata"})," and ",(0,s.jsx)(t.code,{children:"spec.parameters"})," elements are placeholders that will be\noverwritten by the tool when doing the conversion. However, the ",(0,s.jsx)(t.code,{children:"steps"})," remain\nas the primary set of actions later on to be taken by Backstage to deploy the\ngenerated templates."]}),"\n",(0,s.jsxs)(t.p,{children:["The set of steps for the scaffolder are pretty self explanatory but stating the\nobvious, the first two steps ",(0,s.jsx)(t.code,{children:"serialize"})," and ",(0,s.jsx)(t.code,{children:"sanitize"})," the yaml document corresponding\nto the converted CRD, and the last step deploys the CRD to a target Kubernetes\ncluster."]}),"\n",(0,s.jsx)(t.h4,{id:"step-2",children:"Step-2"}),"\n",(0,s.jsx)(t.p,{children:"Run the command below to generate the template for ACK crds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'$ cd ~/cnoe-cli\n$ ./cnoe template crd \\\n  --inputDir examples/ack-crds \\\n  --outputDir /tmp/templates-ack-deploy \\\n  --templatePath config/templates/k8s-apply-template.yaml \\\n  --templateName deploy-ack-resource \\\n  --templateTitle "Deploy ACK Resource" \\\n  --templateDescription "Deploy ACK Resource to Kubernetes" \\\n  -c\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The output in the ",(0,s.jsx)(t.code,{children:"/tmp/templates-ack-deploy"})," should look like below:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"drwxr-xr-x  119 user  wheel   3.7K Aug  7 23:26 resources\ndrwxr-xr-x    4 user  wheel   128B Aug  7 23:26 .\n-rw-r--r--    1 user  wheel    15K Aug  8 19:25 template.yaml\ndrwxrwxrwt   68 root  wheel   2.1K Aug  8 19:34 ..\n"})}),"\n",(0,s.jsx)(t.p,{children:"With the template augmented to have all the resources:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"redepiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: deploy-ack-resource\n  title: Deploy ACK Resource\n  description: Deploy Resource to Kubernetes\nspec:\n  owner: guest\n  type: service\n  parameters:\n  - properties:\n      name:\n        description: name of this resource. This will be the name of K8s object.\n        type: string\n      path:\n        default: kustomize/base\n        description: path to place this file into\n        type: string\n      resources:\n        type: string\n        enum:\n        - acm.services.k8s.aws.Certificate\n        - apigatewayv2.services.k8s.aws.API\n        - apigatewayv2.services.k8s.aws.Authorizer\n        - apigatewayv2.services.k8s.aws.Deployment\n        - apigatewayv2.services.k8s.aws.Integration\n        - apigatewayv2.services.k8s.aws.Route\n        - apigatewayv2.services.k8s.aws.Stage\n        - apigatewayv2.services.k8s.aws.VPCLink\n        - applicationautoscaling.services.k8s.aws.ScalableTarget\n        - applicationautoscaling.services.k8s.aws.ScalingPolicy\n        - cloudfront.services.k8s.aws.CachePolicy\n        - cloudtrail.services.k8s.aws.EventDataStore\n        - cloudtrail.services.k8s.aws.Trail\n        ...\n    dependencies:\n      resources:\n        oneOf:\n        - $yaml: resources/acm.services.k8s.aws.certificate.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.api.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.authorizer.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.deployment.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.integration.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.route.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.stage.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.vpclink.yaml\n        - $yaml: resources/applicationautoscaling.services.k8s.aws.scalabletarget.yaml\n        - $yaml: resources/applicationautoscaling.services.k8s.aws.scalingpolicy.yaml\n        - $yaml: resources/cloudfront.services.k8s.aws.cachepolicy.yaml\n        - $yaml: resources/cloudtrail.services.k8s.aws.eventdatastore.yaml\n        - $yaml: resources/cloudtrail.services.k8s.aws.trail.yaml\n        ...\n  steps:\n  - id: serialize\n    name: serialize\n    action: roadiehq:utils:serialize:yaml\n    input:\n      data:\n        apiVersion: ${{ parameters.apiVersion }}\n        kind: ${{ parameters.kind }}\n        metadata:\n          name: ${{ parameters.name }}\n          namespace: ${{ parameters.namespace }}\n        spec: ${{ parameters.config }}\n  - id: sanitize\n    name: sanitize\n    action: cnoe:utils:sanitize\n    input:\n      document: ${{ steps['serialize'].output.serialized }}\n  - id: apply\n    name: apply-manifest\n    action: cnoe:kubernetes:apply\n    input:\n      manifest: ${{ steps['sanitize'].output.sanitized }}\n      namespaced: true\n\n"})}),"\n",(0,s.jsx)(t.h4,{id:"step-3",children:"Step-3"}),"\n",(0,s.jsx)(t.p,{children:"In this step we will import the generated template to Backstage. The generated template is registered with Backstage by pushing it to a repository and analyzing the generated content. With a valid template, the analysis would be successfully validated and you can import the template into Backstage."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"import",src:n(95525).A+"",width:"721",height:"490"})}),"\n",(0,s.jsx)(t.p,{children:'It would show up in the list of available templates (in this case the service\ntemplate to "Deploy ACK Resources"):'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"navigate",src:n(73479).A+"",width:"1308",height:"586"})}),"\n",(0,s.jsx)(t.p,{children:"Choosing the template would load all the resources dynamically generated for the\ntemplate. In case of Amazon Controller for Kubernetes (ACK), it will be the list\nof over 180 resources that we created from the available CRDs."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"load",src:n(38252).A+"",width:"1314",height:"631"})}),"\n",(0,s.jsx)(t.p,{children:"Once the desired resource is selected, the Backstage UI will be populated with\nthe list of all properties that can be configured for this CRD, with the\nBackstage template validating the presence of required properties before you can\nproceed:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"init",src:n(3587).A+"",width:"1313",height:"1191"})}),"\n",(0,s.jsx)(t.p,{children:"Once the properties are defined, the resource is hydrated for deployment to\nKubernetes:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"create",src:n(34738).A+"",width:"1309",height:"770"})}),"\n",(0,s.jsx)(t.p,{children:"Where deploying the resource will result in running the Backstage scaffolder and\ngetting the resource deployed to a target cluster as configured in your\ntemplate:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"deploy",src:n(48108).A+"",width:"789",height:"472"})}),"\n",(0,s.jsx)(t.h3,{id:"using-terraform",children:"Using Terraform"}),"\n",(0,s.jsx)(t.p,{children:"The CNOE CLI supports integration of Terraform modules into the developer portal."}),"\n",(0,s.jsx)(t.h4,{id:"template-generation",children:"Template Generation"}),"\n",(0,s.jsxs)(t.p,{children:["To generate Backstage template input fields from Terraform modules, you can use the ",(0,s.jsx)(t.code,{children:"tf"})," subcommand. Usage is shown below."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'Generate backstage templates by walking the given input directory, find TF modules,then create output file per module.\nIf the templatePath and insertionPoint flags are set, generated objects are merged into the given template at given insertion point.\nOtherwise a yaml file with two keys are generated. The properties key contains the generated form input. The required key contains the TF variable names that do not have defaults.\n\nUsage:\n  cnoe template tf [flags]\n\nFlags:\n  -h, --help   help for tf\n\nGlobal Flags:\n  -c, --colllapse             if set to true, items are rendered and collapsed as drop down items in a single specified template\n      --depth uint32          depth from given directory to search for TF modules or CRDs (default 2)\n  -i, --inputDir string       input directory for CRDs and XRDs to be templatized\n  -p, --insertAt string       jq path within the template to insert backstage info (default ".spec.parameters[0]")\n  -o, --outputDir string      output directory for backstage templates to be stored in\n      --raww templatePath     prints the raw open API output without putting it into a template (ignoring templatePath and `insertAt`)\n  -t, --templatePath string   path to the template to be augmented with backstage info\n'})}),"\n",(0,s.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["We can run the command against one of modules within the ",(0,s.jsx)(t.a,{href:"https://github.com/awslabs/data-on-eks",children:"Data on EKS"})," repository."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"$ git clone https://github.com/awslabs/data-on-eks.git /tmp/data-on-eks\n\n$ git clone https://github.com/cnoe-io/reference-implementation-aws.git /tmp/ref-impl\n\n$ cnoe template tf \\\n  -i /tmp/data-on-eks/analytics/terraform/spark-k8s-operator \\\n  -t /tmp/ref-impl/examples/template-generation/data-on-eks.yaml \\\n  -p '.spec.parameters[0].properties.tfVars' \\\n  -o .\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"-i"})," flag specifies input Terraform module directory. In this example, the content looks like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"$ ls /tmp/data-on-eks/analytics/terraform/spark-k8s-operator\nREADME.md              data.tf                karpenter-provisioners spark-team.tf\naddons.tf              examples               main.tf                variables.tf\namp.tf                 helm-values            outputs.tf             versions.tf\ncleanup.sh             install.sh             providers.tf           vpc.tf\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"-t"})," flag specifies the location of the partially configured template file. It may look something like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nspec:\n  parameters:\n    - title: Terraform config options\n      properties:\n        tfVars: # this field is to be generated.\n          title: Terraform variables\n          type: object\n    - title: Configuration Options\n      properties:\n        name:\n          title: name of this entry\n          type: string\n        namespace:\n          title: namespace within the kubernetes cluster to deploy this\n          type: string\n          default: data-on-eks\n        adminRoleName: \n          title: Admin Role Name\n          description: Name of the role to give the administrative rights on the EKS cluster.\n          default: Admin\n          type: string\n        clusterName:\n          title: Cluster to run\n          description: The cluster to run this workflow in. \n          type: string\n          ui:field: KubernetesClusterPicker\n        repoUrl: # need a place to store this entity information.\n          title: Repository Location\n          type: string\n          ui:field: RepoUrlPicker\n          ui:options:\n            allowedHosts:\n              - github.com\n...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This template contains input fields (",(0,s.jsx)(t.code,{children:".spec.parameters[1]"}),") that are common to all Data on EKS blueprints. For example, the name of the admin IAM role that will have Cluster Admin access is common to all EKS clusters. The only difference between templates are the terraform configuration options field. We will populate this field with variables from a terraform module."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"-p"})," flag specifies where you want to insert input field within the given template. In this case, we want to insert it at ",(0,s.jsx)(t.code,{children:".spec.parameters[0].properties.tfVars"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"-o"})," flag specifies the output directory. In this case, we want it to output it to the current directory."]}),"\n",(0,s.jsx)(t.p,{children:"Once the fields are generated and inserted, the template is ready to use. When rendered in Backstage, it should look something like this."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(3967).A+"",width:"3426",height:"2012"})}),"\n",(0,s.jsx)(t.p,{children:"The diff between the original template and generated template should look something like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'spec.parameters\n  - one list entry removed:\n    - title: "Terraform config options"\n    \u2502 properties:\n    \u2502 \u2502 tfVars:\n    \u2502 \u2502 \u2502 type: object\n    \u2502 \u2502 \u2502 title: "Terraform variables"\n\n  + one list entry added:\n    - properties:\n    \u2502 \u2502 tfVars:\n    \u2502 \u2502 \u2502 type: object\n    \u2502 \u2502 \u2502 title: "Terraform variables"\n    \u2502 \u2502 \u2502 properties:\n    \u2502 \u2502 \u2502 \u2502 name:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: spark-operator-doeks\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Name of the VPC and EKS Cluster"\n    \u2502 \u2502 \u2502 \u2502 eks_cluster_version:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: 1.26\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "EKS Cluster version"\n    \u2502 \u2502 \u2502 \u2502 enable_amazon_prometheus:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: boolean\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: true\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Enable AWS Managed Prometheus service"\n    \u2502 \u2502 \u2502 \u2502 enable_vpc_endpoints:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: boolean\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: false\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Enable VPC Endpoints"\n    \u2502 \u2502 \u2502 \u2502 enable_yunikorn:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: boolean\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: true\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Enable Apache YuniKorn Scheduler"\n    \u2502 \u2502 \u2502 \u2502 region:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: us-west-2\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: Region\n    \u2502 \u2502 \u2502 \u2502 vpc_cidr:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 \u2502 default: 10.1.0.0/16\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "VPC CIDR. This should be a valid private (RFC 1918) CIDR range"\n    \u2502 \u2502 \u2502 \u2502 eks_data_plane_subnet_secondary_cidr:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: array\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Secondary CIDR blocks. 32766 IPs per Subnet per Subnet/AZ for EKS Node and Pods"\n    \u2502 \u2502 \u2502 \u2502 \u2502 default:\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 100.64.0.0/17\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 100.64.128.0/17\n    \u2502 \u2502 \u2502 \u2502 \u2502 items:\n    \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 private_subnets:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: array\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Private Subnets CIDRs. 254 IPs per Subnet/AZ for Private NAT + NLB + Airflow + EC2 Jumphost etc."\n    \u2502 \u2502 \u2502 \u2502 \u2502 default:\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 10.1.1.0/24\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 10.1.2.0/24\n    \u2502 \u2502 \u2502 \u2502 \u2502 items:\n    \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 public_subnets:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: array\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Public Subnets CIDRs. 62 IPs per Subnet/AZ"\n    \u2502 \u2502 \u2502 \u2502 \u2502 default:\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 10.1.0.0/26\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 10.1.0.64/26\n    \u2502 \u2502 \u2502 \u2502 \u2502 items:\n    \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 \u2502 \u2502 \u2502 secondary_cidr_blocks:\n    \u2502 \u2502 \u2502 \u2502 \u2502 type: array\n    \u2502 \u2502 \u2502 \u2502 \u2502 description: "Secondary CIDR blocks to be attached to VPC"\n    \u2502 \u2502 \u2502 \u2502 \u2502 default:\n    \u2502 \u2502 \u2502 \u2502 \u2502 - 100.64.0.0/16\n    \u2502 \u2502 \u2502 \u2502 \u2502 items:\n    \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 type: string\n    \u2502 title: "Terraform config options"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"verification",children:"Verification"}),"\n",(0,s.jsx)(t.p,{children:"Verifications play a key role in ensuring successful rollouts in an IDP.\nVerifications are done external to the target Kubernetes cluster and perform\nreadiness and dependency checks against the target cluster."}),"\n",(0,s.jsxs)(t.p,{children:["CNOE supports running verifications either by using the CNOE cli, or\nby embedding them into the Backstage workflow as a ",(0,s.jsx)(t.code,{children:"verify"})," step in the\n",(0,s.jsx)(t.a,{href:"https://cnoe.io/docs/reference-implementation/plugins/scaffolder-backend",children:"Scaffolder Backend Plugin"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"CNOE supports the following (growing) list of verifications:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"availability of required CRDs in a target Kubernetes cluster"}),"\n",(0,s.jsx)(t.li,{children:"readiness of operators in a target Kubernetes cluster"}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["full specification for the verification templates is available in ",(0,s.jsx)(t.a,{href:"https://github.com/cnoe-io/cnoe-cli/tree/main/config/templates",children:"the CNOE CLI\nrepo"}),"."]})}),"\n",(0,s.jsx)(t.h3,{id:"writing-a-verification-template",children:"Writing a Verification Template"}),"\n",(0,s.jsxs)(t.p,{children:["Below is a sample\nspec for a prerequisite ensuring that the ",(0,s.jsx)(t.a,{href:"https://aws-controllers-k8s.github.io/community/",children:"Amazon Controllers for Kubernetes"}),"\nS3 controller is installed and running in a target cluster:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: cnoe.io/v1alpha1\nkind: Prerequisite\nmetadata:\n  name: ack-s3\n  annotations:\n  - test: something\n  - another: something\nspec:\n  pods:\n  - name: ack-release-s3\n    namespace: ack-system\n    state: Running\n  crds:\n  - group: s3.services.k8s.aws\n    version: v1alpha1\n    kind: Buckets\n  - group: acme.cert-manager.io\n    kind: Challenges\n    version: v1\n  - group: services.k8s.aws\n    kind: AdoptedResources\n    version: v1alpha1\n  - group: services.k8s.aws\n    kind: FieldExports\n    version: v1alpha1\n  - group: vpcresources.k8s.aws\n    kind: SecurityGroupPolicies\n    version: v1beta1\n"})}),"\n",(0,s.jsx)(t.h3,{id:"running-verifications",children:"Running Verifications"}),"\n",(0,s.jsx)(t.h4,{id:"via-the-cnoe-cli",children:"via the CNOE CLI"}),"\n",(0,s.jsxs)(t.p,{children:["The CLI support running verifications against a target cluster by running the\ncommand ",(0,s.jsx)(t.code,{children:"./cnoe k8s verify"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'$ ./cnoe k8s verify -h\nVerify if the required resources and controllers are working as expected\n\nUsage:\n  cnoe k8s verify [flags]\n\nFlags:\n  -c, --config stringArray   list of prerequisite configurations (samples under config/prereq)\n  -h, --help                 help for verify\n\nGlobal Flags:\n  -k, --kubeconfig string   path to the kubeconfig file (default "~/.kube/config")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Below is an example successful output of running ",(0,s.jsx)(t.code,{children:"verify"})," against a target cluster:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"$ ./cnoe k8s verify --config config/prereq/ack-s3-prerequisites.yaml\n\u2713 ack-s3 - s3.services.k8s.aws/v1alpha1, Kind=Buckets\n\u2713 ack-s3 - acme.cert-manager.io/v1, Kind=Challenges\n\u2713 ack-s3 - services.k8s.aws/v1alpha1, Kind=AdoptedResources\n\u2713 ack-s3 - services.k8s.aws/v1alpha1, Kind=FieldExports\n\u2713 ack-s3 - vpcresources.k8s.aws/v1beta1, Kind=SecurityGroupPolicies\n\u2713 ack-s3 - ack-system, Pod=ack-release-s3-chart-8f76bf8bb-nm9wv - Running\n"})}),"\n",(0,s.jsx)(t.p,{children:"And when things fail:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"$ ./cnoe k8s verify --config config/prereq/bad-spark-prerequisites.yaml\nX bad-spark - sparkoperator.k8s.io/v2beta2, Kind=SparkApplication\nX bad-spark -  Pod=sprk-operator\n2 errors occurred:\n        * sparkoperator.k8s.io/v2beta2, Kind=SparkApplication not found\n        *  Pod=sprk-operator not found\n"})}),"\n",(0,s.jsx)(t.h4,{id:"via-the-backend-scaffolder",children:"via the Backend Scaffolder"}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsx)(t.p,{children:"Running the verification phase from within CNOE is still experimental and\nrequires the presence of the CNOE CLI binary on the container image for\nBackstage, where it is configured to target the desired cluster."})}),"\n",(0,s.jsx)(t.p,{children:"The backend scaffolder plugin implements a step where the CNOE CLI can be called\nwith reference to the respective Prerequisite check that needs to be run against\nthe target cluster prior to installing resources."}),"\n",(0,s.jsx)(t.p,{children:"In case of a S3 resource that is enabled via the Amazon Controllers for\nKubernetes (ACK), this would be a check that verifies the existence of the\nrelevant CRDs as well as ensuring that the ACK S3 Controller is present and\nrunning."}),"\n",(0,s.jsx)(t.p,{children:"In case of a failure, the Backstage scaffolder halts the execution flow and\nshows the exact error reporting that the CNOE CLI reports upon execution from\nwithin the terminal (see below):"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"verify",src:n(59031).A+"",width:"1320",height:"874"})}),"\n",(0,s.jsx)(t.p,{children:"In case of a successful verification, the verify step would finish execution\nwith an exit code 0 and allow for the rest of the steps to proceed:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"deploy",src:n(48108).A+"",width:"789",height:"472"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},34738:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/6-create-resource-7c9af188d865f85aa05c2a562e24f423.png"},38252:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/4-load-resource-3e699b611322192a9864ecb646a00eba.png"},48108:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/7-deploy-resource-6cb3b585e1ceec63c255becc25d60356.png"},59031:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/verify-a4657db9cf6395b592a49e6b98b6569b.png"},73479:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/3-navigate-catalog-c9ca1ea250aa9a2dbcef1a509fcdaddc.png"},95525:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2-import-template-3f5406bff4996c5a8f80307ebb9f21f7.png"}}]);