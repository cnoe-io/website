"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[3103],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o=n.p+"assets/images/color-output-56c26ee92dd17a246966df3dbe84e70a.png",i={sidebar_position:1,description:"Using idpBuilder",title:"Using the idpBuilder",index:2},s=void 0,l={unversionedId:"reference-implementation/idpbuilder/usage",id:"reference-implementation/idpbuilder/usage",title:"Using the idpBuilder",description:"Using idpBuilder",source:"@site/docs/reference-implementation/idpbuilder/usage.md",sourceDirName:"reference-implementation/idpbuilder",slug:"/reference-implementation/idpbuilder/usage",permalink:"/docs/reference-implementation/idpbuilder/usage",draft:!1,editUrl:"https://github.com/cnoe-io/website/tree/main/docs/reference-implementation/idpbuilder/usage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Using idpBuilder",title:"Using the idpBuilder",index:2},sidebar:"tutorialSidebar",previous:{title:"Set up IDP on Local Machine",permalink:"/docs/reference-implementation/idpbuilder/"},next:{title:"Troubleshooting",permalink:"/docs/reference-implementation/idpbuilder/troubleshooting"}},p={},c=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Example commands",id:"example-commands",level:2},{value:"Create",id:"create",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3},{value:"Gitea Integration",id:"gitea-integration",level:2},{value:"Workflows",id:"workflows",level:2},{value:"Exposing Services",id:"exposing-services",level:2},{value:"Running IDPBuilder on a remote host",id:"running-idpbuilder-on-a-remote-host",level:2},{value:"Option 1: SSH Port forwarding",id:"option-1-ssh-port-forwarding",level:3},{value:"Option 2: Changing the ingress host",id:"option-2-changing-the-ingress-host",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,a.kt)("p",null,"The most basic command which creates a Kubernetes Cluster (Kind cluster) with the core packages installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"idpbuilder create\n")),(0,a.kt)("p",null,"Once idpbuilder finishes provisioning cluster and packages, you can access GUIs by going to the following addresses in your browser."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ArgoCD: ",(0,a.kt)("a",{parentName:"li",href:"https://argocd.cnoe.localtest.me:8443/"},"https://argocd.cnoe.localtest.me:8443/")),(0,a.kt)("li",{parentName:"ul"},"Gitea: ",(0,a.kt)("a",{parentName:"li",href:"https://gitea.cnoe.localtest.me:8443/"},"https://gitea.cnoe.localtest.me:8443/"))),(0,a.kt)("p",null,"You can obtain credentials for them by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"idpbuilder get secrets\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Color Output"),(0,a.kt)("p",null,"idpbuilder supports colored output with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--color")," flag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"idpbuilder create --color\n")),(0,a.kt)("img",{src:o,width:"60%",height:"60%"})),(0,a.kt)("h2",{id:"example-commands"},"Example commands"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For more advanced use cases, check out the ",(0,a.kt)("a",{parentName:"strong",href:"https://github.com/cnoe-io/stacks"},"Stacks Repository"),".")),(0,a.kt)("h3",{id:"create"},"Create"),(0,a.kt)("p",null,"Specify the kubernetes version by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--kube-version")," flag. Supported versions are available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/kind/releases"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create --kube-version v1.27.3\n")),(0,a.kt)("p",null,"Specify your own kind configuration file, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--kind-config")," flag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create --build-name local --kind-config ./my-kind.yaml\n")),(0,a.kt)("p",null,"Override ArgoCD configmap."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create --package-custom-file=argocd:path/to/argocd-cm.yaml\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example Contents of argocd-cm.yaml"),(0,a.kt)("p",null,"This configuration allows for anonymous login"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    # Labels below are required by ArgoCD\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\n    Test: Data\n  name: argocd-cm\ndata:\n  # Enables anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.yaml.\n  users.anonymous.enabled: "true"\n  application.resourceTrackingMethod: annotation\n  resource.exclusions: |\n    - kinds:\n        - ProviderConfigUsage\n      apiGroups:\n        - "*"\n'))),(0,a.kt)("p",null,"Use a public repository to pull extra packages. See ",(0,a.kt)("a",{parentName:"p",href:"#custom-packages"},"this section")," for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create -p https://github.com/cnoe-io/stacks//basic/package1\n")),(0,a.kt)("p",null,"Use a private repository to pull extra packages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/cnoe-io/stacks-private\nidpbuilder create -p ./stacks-private/basic/package1\n")),(0,a.kt)("p",null,"Increase the verbosity of idpbuilder for troubleshooting. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create -l debug\n")),(0,a.kt)("p",null,"For available flags and subcommands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder create --help\n")),(0,a.kt)("h3",{id:"get"},"Get"),(0,a.kt)("p",null,"Get all relevant secrets. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/intro/idpbuilder/how-it-works#getting-relevant-secrets"},"this section")," for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder get secrets\n")),(0,a.kt)("p",null,"Get secrets for a package named ",(0,a.kt)("inlineCode",{parentName:"p"},"gitea"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder get secrets -p gitea\n")),(0,a.kt)("h3",{id:"delete"},"Delete"),(0,a.kt)("p",null,"Delete a cluster named ",(0,a.kt)("inlineCode",{parentName:"p"},"localdev"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"idpbuilder delete --name localdev\n")),(0,a.kt)("h2",{id:"gitea-integration"},"Gitea Integration"),(0,a.kt)("p",null,"idpbuilder creates an internal ",(0,a.kt)("a",{parentName:"p",href:"https://about.gitea.com/"},"Gitea")," server (accessible from your laptop and kind cluster only).\nThis can be used for various purposes such as sources for ArgoCD, container registry, and more.\nTo facilitate interactions with Gitea, idpbuilder creates a token with administrator scope, then stores it in a Kubernetes secret."),(0,a.kt)("p",null,"The token can be obtained by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# print all secrets associated with gitea\nidpbuilder get secrets -p gitea\n\n# get token only\nidpbuilder get secrets -p gitea -o json | jq  -r '.[0].data.token\n\n")),(0,a.kt)("p",null,"Here are a some examples for using the token:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Create a Gitea Organization"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\nTOKEN=$(idpbuilder get secrets -p gitea -o json | jq  -r \'.[0].data.token\' )\ncurl -k -X POST \\\n  https://gitea.cnoe.localtest.me:8443/api/v1/orgs \\\n  -H \'Content-Type: application/json\' \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{"description": "my-org", "email": "my-org@my.m", "full_name": "my-org", "username": "my-org"}\'\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Create a Gitea User"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\nTOKEN=$(idpbuilder get secrets -p gitea -o json | jq  -r \'.[0].data.token\' )\ncurl -k -X POST \\\n  https://gitea.cnoe.localtest.me:8443/api/v1/admin/users \\\n  -H \'Content-Type: application/json\' \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{"email": "my-org@my.m", "full_name": "user one", "username": "user1", "password": "password", "must_change_password": true}\'\n'))),(0,a.kt)("h2",{id:"workflows"},"Workflows"),(0,a.kt)("p",null,"In some situations, you need to run imperative jobs such as creating users in your service, managing secrets, or calling APIs.\nArgoCD ",(0,a.kt)("a",{parentName:"p",href:"https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/"},"Resource Hooks")," are perfect for these scenarios.\nThese hooks allow you to execute imperative workflows at various stages of the ArgoCD sync process."),(0,a.kt)("p",null,"For example, you can create a Kubernetes job that runs after a PostgreSQL database is created and ready by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostSync")," hook. Here's an example:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example PostgreSQL User Creation Hook"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: create-db-user\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: create-user\n        image: bitnami/postgresql:latest\n        command: [\"/bin/bash\", \"-c\"]\n        args:\n        - |\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgresql -U postgres <<'EOF'\n            DO $$ \n            BEGIN\n              IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'myapp') THEN\n                CREATE USER myapp WITH PASSWORD 'mypassword';\n                GRANT ALL PRIVILEGES ON DATABASE mydatabase TO myapp;\n              END IF;\n            END\n            $$;\n          EOF\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgresql\n              key: postgres-password\n      restartPolicy: Never\n  backoffLimit: 3\n"))),(0,a.kt)("p",null,"More complex examples are available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/stacks/blob/main/ref-implementation/keycloak/manifests/keycloak-config.yaml"},"here")," "),(0,a.kt)("h2",{id:"exposing-services"},"Exposing Services"),(0,a.kt)("p",null,"Idpbuilder comes with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/ingress-nginx"},"ingress-nginx"),", and this is meant to be used as an easy way to expose services to the outside world.\nSee ",(0,a.kt)("a",{parentName:"p",href:"/docs/intro/idpbuilder/how-it-works#networking"},"the networking overview section"),"   for more information.\nBy default, idpbuilder exposes the ingress-nginx service on host port 8443 and Kubernetes Ingress objects are created for core packages.\nFor example, an ingress object for Gitea looks something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nspec:\n  ingressClassName: nginx\n  rules:\n    - host: gitea.cnoe.localtest.me\n      http:\n        paths:\n          - path: /\n            backend:\n              service:\n                name: my-gitea-http\n")),(0,a.kt)("p",null,"With this configuration, nginx routes traffic to Gitea service when http requests are made for ",(0,a.kt)("inlineCode",{parentName:"p"},"gitea.cnoe.localtest.me"),"."),(0,a.kt)("p",null,"Similarly, you can expose your own service by defining an ingress object.\nFor example, to expose a service named my-service at ",(0,a.kt)("inlineCode",{parentName:"p"},"my-service.cnoe.localtest.me"),", the ingress object may look something like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-service\nspec:\n  ingressClassName: nginx\n  rules:\n    - host: my-service.cnoe.localtest.me\n      http:\n        paths:\n          - backend:\n              service:\n                name: my-service\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n")),(0,a.kt)("h2",{id:"running-idpbuilder-on-a-remote-host"},"Running IDPBuilder on a remote host"),(0,a.kt)("h3",{id:"option-1-ssh-port-forwarding"},"Option 1: SSH Port forwarding"),(0,a.kt)("p",null,"This option is the most flexible and involves using an ssh connection to forward traffic from local ports to the server where IDPBuilder was run.\nFirst create your cluster on the server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"user@server:~/$ idpbuilder create\n")),(0,a.kt)("p",null,"Once your cluster is created we need to configure our port forwards:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"user@local:~/$ ssh -L 8443:server:8443 -L 32222:server:32222 user@server\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-L 8443:server:8443")," adds portforwarding for the ingress."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-L 32222:server:32222")," adds portforwarding for the gitea ssh port."),(0,a.kt)("p",null,"If you want to use kubectl on your local machine first find the port the kube-api is exposed on:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"user@server:~/$ idpbuilder get clusters\nNAME       EXTERNAL-PORT   KUBE-API                  TLS     KUBE-PORT   NODES\nlocaldev   8443            https://127.0.0.1:36091   false   6443        localdev-control-plane\n")),(0,a.kt)("p",null,"In this case it is exposed on 36091. Then add the following to your ssh command:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-L 36091:server:36091")),(0,a.kt)("p",null,"Finally copy the kube config from the server to the local machine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"user@local:~/$ mkdir -p ~/.kube\nuser@local:~/$ scp user@server:~/.kube/config ~/.kube/config\n")),(0,a.kt)("h3",{id:"option-2-changing-the-ingress-host"},"Option 2: Changing the ingress host"),(0,a.kt)("p",null,"If you only need remote access to the ingress you can build your remote cluster using the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"user@server:~/$ idpbuilder create --host SERVER.DOMAIN.NAME.HERE --use-path-routing\n")),(0,a.kt)("p",null,"note that this doesn't work with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--dev-password")," flag."))}d.isMDXComponent=!0}}]);