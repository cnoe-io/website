"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[7233],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4540:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_position:1,description:"Augmenting CNOE with CRD templates",title:"Templating of CRDs / XRDs"},i=void 0,o={unversionedId:"reference-implementation/integrations/generated/crd-templating",id:"reference-implementation/integrations/generated/crd-templating",title:"Templating of CRDs / XRDs",description:"Augmenting CNOE with CRD templates",source:"@site/docs/reference-implementation/integrations/generated/crd-templating.md",sourceDirName:"reference-implementation/integrations/generated",slug:"/reference-implementation/integrations/generated/crd-templating",permalink:"/docs/reference-implementation/integrations/generated/crd-templating",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/integrations/generated/crd-templating.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Augmenting CNOE with CRD templates",title:"Templating of CRDs / XRDs"},sidebar:"tutorialSidebar",previous:{title:"CNOE CLI",permalink:"/docs/reference-implementation/integrations/generated/"},next:{title:"Templating of Terraform Modules",permalink:"/docs/reference-implementation/integrations/generated/tf-templating"}},l={},p=[{value:"Template Generation",id:"template-generation",level:2},{value:"Example",id:"example",level:2},{value:"Custom Resource Definitions",id:"custom-resource-definitions",level:3},{value:"The Backstage Scaffolding Template",id:"the-backstage-scaffolding-template",level:3},{value:"Conversion",id:"conversion",level:3},{value:"Importing to Backstage",id:"importing-to-backstage",level:3}],c={toc:p};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The CNOE CLI allows you to create Backstage developer workflows from existing Kubernetes\nCustom Resource Definitions (CRDs) and Crossplane Composite Resource Definitions\n(XRDs). "),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This is proven particularly useful for in-house Kubernetes controllers for which there\nis a need for integration with Backstage.")),(0,r.kt)("h2",{id:"template-generation"},"Template Generation"),(0,r.kt)("p",null,"As shown below, the ",(0,r.kt)("inlineCode",{parentName:"p"},"./cnoe template crd")," command allows you to specify an input\ndirectory for stored CRD specifications, the template that needs to be populated\nwith the list of converted CRDs, definings whether or not the\nCRD is cluster-scoped or namespace-scoped, and configuration knobs to set the\nname, title, and description of the generated template."),(0,r.kt)("p",null,"The generated templates are stored in the defined output directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Generate backstage templates from supplied CRD and XRD definitions\n\nUsage:\n  cnoe template crd [flags]\n\nFlags:\n  -h, --help                         help for crd\n  -n, --namespaced                   whether or not resources are namespaced\n      --templateDescription string   sets the description of the template\n      --templateName string          sets the name of the template\n  -t, --templatePath string          path to the template to be augmented with backstage info (default "scaffolding/template.yaml")\n      --templateTitle string         sets the title of the template\n  -v, --verifier stringArray         list of verifiers to test the resource against\n\nGlobal Flags:\n  -i, --inputDir string    input directory for CRDs and XRDs to be templatized\n  -o, --outputDir string   output directory for backstage templates to be stored in\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"You require the list of CRDs that you want to convert, and a Backstage template:"),(0,r.kt)("h3",{id:"custom-resource-definitions"},"Custom Resource Definitions"),(0,r.kt)("p",null,"For this example, let us look at the CRDs available in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/cnoe-cli/tree/main/examples"},"CNOE CLI repository"),".\nIn particular, the CRDs for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aws-controllers-k8s"},"Amazon Controllers for\nKubernetes (ACK)"),".\nThere is approximately 120 sample ACK CRDs in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/cnoe-cli/tree/main/examples/ack-crds"},"example repo"),"."),(0,r.kt)("h3",{id:"the-backstage-scaffolding-template"},"The Backstage Scaffolding Template"),(0,r.kt)("p",null,"You can choose a scaffolding template of your choice to pass to the tool for it\nto augment it with the list of converted CRD elements. For this example we\nchoose the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/cnoe-cli/blob/main/config/templates/k8s-apply-template.yaml"},"k8s-apply-template"),"\navailable in the CNOE CLI repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: deploy-resources\n  title: Deploy Resources\n  description: Deploy Resource to Kubernetes\nspec:\n  owner: guest\n  type: service\n  # these are the steps which are rendered in the frontend with the form input\n  parameters:\n    - title: Choose AWS Resources\n      description: Select a AWS resource to add to your repository.\n      properties:\n        path:\n          type: string\n          description: path to place this file into\n          default: kustomize/base\n        name:\n          type: string\n          description: name of this resource. This will be the name of K8s object.\n      required:\n        - awsResources\n        - name\n  steps:\n  - id: serialize\n    name: serialize\n    action: roadiehq:utils:serialize:yaml\n    input:\n      data:\n        apiVersion: ${{ parameters.apiVersion }}\n        kind: ${{ parameters.kind }}\n        metadata:\n          name: ${{ parameters.name }}\n          namespace: ${{ parameters.namespace }}\n        spec: ${{ parameters.config }}\n  - id: sanitize\n    name: sanitize\n    action: cnoe:utils:sanitize\n    input:\n      document: ${{ steps['serialize'].output.serialized }}\n  - id: apply\n    name: apply-manifest\n    action: cnoe:kubernetes:apply\n    input:\n      namespaced: true\n      manifest: ${{ steps['sanitize'].output.sanitized }}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.parameters")," elements are placeholders that will be\noverwritten by the tool when doing the conversion. However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"steps")," remain\nas the primary set of actions later on to be taken by Backstage to deploy the\ngenerated templates."),(0,r.kt)("p",null,"The set of steps for the scaffolder are pretty self explanatory but stating the\nobvious, the first two steps ",(0,r.kt)("inlineCode",{parentName:"p"},"serialize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize")," the yaml document corresponding\nto the converted CRD, and the last step deploys the CRD to a target Kubernetes\ncluster."),(0,r.kt)("h3",{id:"conversion"},"Conversion"),(0,r.kt)("p",null,"Run the command below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'\u276f cd ~/cnoe-cli\n\u276f ./cnoe template crd \\\n  --inputDir examples/ack-crds \\\n  --outputDir /tmp/templates-ack-deploy \\\n  --templatePath config/templates/k8s-apply-template.yaml \\\n  --namespaced \\\n  --templateName deploy-ack-resource \\\n  --templateTitle "Deploy ACK Resource" \\\n  --templateDescription "Deploy ACK Resource to Kubernetes"\n')),(0,r.kt)("p",null,"The output in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/tmp/templates-ack-deploy")," should look like below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"drwxr-xr-x  119 user  wheel   3.7K Aug  7 23:26 resources\ndrwxr-xr-x    4 user  wheel   128B Aug  7 23:26 .\n-rw-r--r--    1 user  wheel    15K Aug  8 19:25 template.yaml\ndrwxrwxrwt   68 root  wheel   2.1K Aug  8 19:34 ..\n")),(0,r.kt)("p",null,"With the template augmented to have all the resources:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"redepiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: deploy-ack-resource\n  title: Deploy ACK Resource\n  description: Deploy Resource to Kubernetes\nspec:\n  owner: guest\n  type: service\n  parameters:\n  - properties:\n      name:\n        description: name of this resource. This will be the name of K8s object.\n        type: string\n      path:\n        default: kustomize/base\n        description: path to place this file into\n        type: string\n      resources:\n        type: string\n        enum:\n        - acm.services.k8s.aws.Certificate\n        - apigatewayv2.services.k8s.aws.API\n        - apigatewayv2.services.k8s.aws.Authorizer\n        - apigatewayv2.services.k8s.aws.Deployment\n        - apigatewayv2.services.k8s.aws.Integration\n        - apigatewayv2.services.k8s.aws.Route\n        - apigatewayv2.services.k8s.aws.Stage\n        - apigatewayv2.services.k8s.aws.VPCLink\n        - applicationautoscaling.services.k8s.aws.ScalableTarget\n        - applicationautoscaling.services.k8s.aws.ScalingPolicy\n        - cloudfront.services.k8s.aws.CachePolicy\n        - cloudtrail.services.k8s.aws.EventDataStore\n        - cloudtrail.services.k8s.aws.Trail\n        ...\n    dependencies:\n      resources:\n        oneOf:\n        - $yaml: resources/acm.services.k8s.aws.certificate.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.api.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.authorizer.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.deployment.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.integration.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.route.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.stage.yaml\n        - $yaml: resources/apigatewayv2.services.k8s.aws.vpclink.yaml\n        - $yaml: resources/applicationautoscaling.services.k8s.aws.scalabletarget.yaml\n        - $yaml: resources/applicationautoscaling.services.k8s.aws.scalingpolicy.yaml\n        - $yaml: resources/cloudfront.services.k8s.aws.cachepolicy.yaml\n        - $yaml: resources/cloudtrail.services.k8s.aws.eventdatastore.yaml\n        - $yaml: resources/cloudtrail.services.k8s.aws.trail.yaml\n        ...\n  steps:\n  - id: serialize\n    name: serialize\n    action: roadiehq:utils:serialize:yaml\n    input:\n      data:\n        apiVersion: ${{ parameters.apiVersion }}\n        kind: ${{ parameters.kind }}\n        metadata:\n          name: ${{ parameters.name }}\n          namespace: ${{ parameters.namespace }}\n        spec: ${{ parameters.config }}\n  - id: sanitize\n    name: sanitize\n    action: cnoe:utils:sanitize\n    input:\n      document: ${{ steps['serialize'].output.serialized }}\n  - id: apply\n    name: apply-manifest\n    action: cnoe:kubernetes:apply\n    input:\n      manifest: ${{ steps['sanitize'].output.sanitized }}\n      namespaced: true\n\n")),(0,r.kt)("h3",{id:"importing-to-backstage"},"Importing to Backstage"),(0,r.kt)("p",null,"The generated template can then registered with Backstage by pushing it to a\nrepository and analyzing the generated content.  With a valid template,\nthe analysis would be successfully validated and you can import the template\ninto Backstage."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"import",src:a(9776).Z,width:"721",height:"490"})),(0,r.kt)("p",null,'It would show up in the list of available templates (in this case the service\ntemplate to "Deploy ACK Resources"):'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"navigate",src:a(7904).Z,width:"1308",height:"586"})),(0,r.kt)("p",null,"Choosing the template would load all the resources dynamically generated for the\ntemplate. In case of Amazon Controller for Kubernetes (ACK), it will be the list\nof over 180 resources that we created from the available CRDs."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"load",src:a(9487).Z,width:"1314",height:"631"})),(0,r.kt)("p",null,"Once the desired resource is selected, the Backstage UI will be populated with\nthe list of all properties that can be configured for this CRD, with the\nBackstage template validating the presence of required properties before you can\nproceed:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"init",src:a(5282).Z,width:"1313",height:"1191"})),(0,r.kt)("p",null,"Once the properties are defined, the resource is hydrated for deployment to\nKubernetes:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"create",src:a(3760).Z,width:"1309",height:"770"})),(0,r.kt)("p",null,"Where deploying the resource will result in running the Backstage scaffolder and\ngetting the resource deployed to a target cluster as configured in your\ntemplate:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"deploy",src:a(5470).Z,width:"789",height:"472"})))}m.isMDXComponent=!0},9776:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2-import-template-3f5406bff4996c5a8f80307ebb9f21f7.png"},7904:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3-navigate-catalog-c9ca1ea250aa9a2dbcef1a509fcdaddc.png"},9487:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/4-load-resource-3e699b611322192a9864ecb646a00eba.png"},5282:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5-init-resource-5643b5a08848f148a6426c92294a8830.png"},3760:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/6-create-resource-7c9af188d865f85aa05c2a562e24f423.png"},5470:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/7-deploy-resource-6cb3b585e1ceec63c255becc25d60356.png"}}]);