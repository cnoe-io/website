"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[4658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1243:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1,description:"Enabling Infrastructure as Code",title:"Terraform Plugin"},i="CNOE Terraform Backstage Plugin",l={unversionedId:"reference-implementation/plugins/terraform-plugin",id:"reference-implementation/plugins/terraform-plugin",title:"Terraform Plugin",description:"Enabling Infrastructure as Code",source:"@site/docs/reference-implementation/plugins/terraform-plugin.md",sourceDirName:"reference-implementation/plugins",slug:"/reference-implementation/plugins/terraform-plugin",permalink:"/docs/reference-implementation/plugins/terraform-plugin",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/plugins/terraform-plugin.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Enabling Infrastructure as Code",title:"Terraform Plugin"},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/docs/category/plugins"},next:{title:"Argo Workflows Plugin",permalink:"/docs/reference-implementation/plugins/argo-workflows"}},s={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Terraform State Files",id:"terraform-state-files",level:3},{value:"Configuration - Frontend",id:"configuration---frontend",level:3},{value:"Annotations",id:"annotations",level:4},{value:"Configuration - Backend",id:"configuration---backend",level:3},{value:"Authentication",id:"authentication",level:3},{value:"AWS Credentials",id:"aws-credentials",level:4},{value:"IAM permissions",id:"iam-permissions",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cnoe-terraform-backstage-plugin"},"CNOE Terraform Backstage Plugin"),(0,r.kt)("admonition",{title:"github repo",type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/plugin-terraform"},"cnoe-io/plugin-terraform"))),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("h3",{id:"terraform-state-files"},"Terraform State Files"),(0,r.kt)("p",null,"This plugin supports two storage locations for Terraform state files (tfstate): S3 and local file systems. S3 will require additional configuration for AWS credentials to access S3. To access local file systems, the terraform backend will need proper file permissions to access those files."),(0,r.kt)("h3",{id:"configuration---frontend"},"Configuration - Frontend"),(0,r.kt)("p",null,"Entities must be annotated with Kubernetes annotations. An example component\nwould look like the following where you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec")," to your\nliking. Information specific to Terraform goes under ",(0,r.kt)("inlineCode",{parentName:"p"},"annotations")," as\nshown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: backstage\n  annotations:\n    terraform/s3-bucket: backstage-terraform-plugin\n    terraform/s3-prefix: tfstates/\n    terraform/local-filepath: /var/lib/tfstatefiles\nspec:\n  type: service\n  lifecycle: experimental\n  owner: user1\n  system: system1\n")),(0,r.kt)("p",null,"Update your Entity page. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// in packages/app/src/components/catalog/EntityPage.tsx\nimport { TerraformPluginPage } from \'@cnoe-io/plugin-terraform\';\n...\nconst terraFormContent = (\n  <TerraformPluginPage />\n);\n...\nconst websiteEntityPage = (\n  <EntityLayout>\n  ...\n    <EntityLayout.Route path="/terraform" title="Terraform">\n      {terraFormContent}\n    </EntityLayout.Route>\n  </EntityLayout>\n...\n);\n')),(0,r.kt)("h4",{id:"annotations"},"Annotations"),(0,r.kt)("p",null,"As shown in the example above, the following annotations could go under\n",(0,r.kt)("inlineCode",{parentName:"p"},"annotations")," in the backstage ",(0,r.kt)("inlineCode",{parentName:"p"},"Component")," and will be recognized by this plugin."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One of the two annotations below are required:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"terraform/s3-bucket"),": Required. The S3 bucket where tfstate files would be stored."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"terraform/local-filepath"),": Required. The local file system path of where tfstate files would be stored."),(0,r.kt)("li",{parentName:"ul"},"If storing tfstate files in S3, you can optionally define a prefix:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"terraform/s3-prefix"),": Optional. This is a S3 prefix of where tfstate files would be stored in the S3 bucket.")),(0,r.kt)("p",null,"Note: The plugin only supports using one storage location at a time. If you define an S3 storage location and a local file system, the plugin will only use the S3 storage location."),(0,r.kt)("h3",{id:"configuration---backend"},"Configuration - Backend"),(0,r.kt)("p",null,"Create a new file at ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/backend/src/plugins/terraform.ts")," with the following contents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Router } from 'express';\nimport { PluginEnvironment } from '../types';\nimport { createRouter } from '@cnoe-io/plugin-terraform-backend';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return await createRouter({\n    logger: env.logger,\n    config: env.config,\n  });\n}\n\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/backend/src/index.ts"),", import the function created above and create an endpoint for the backend."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import ...\nimport terraform from './plugins/terraform';\n\n...\nconst appEnv = useHotMemoize(module, () => createEnv('app'));\nconst terraformEnv = useHotMemoize(module, () => createEnv('terraform'));\n...\napiRouter.use('/search', await search(searchEnv));\napiRouter.use('/terraform', await terraform(terraformEnv));\n...\n")),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("h4",{id:"aws-credentials"},"AWS Credentials"),(0,r.kt)("p",null,"By default, the Terraform backend plugin relies on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_credential_provider_node.html"},"default behavior of the AWS SDK for Javascript")," to determine the AWS credentials that it uses to authenticate an identity to use with AWS APIs."),(0,r.kt)("p",null,"The Terraform backend plugin that runs in your Backstage app searches for credentials in the following order:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Environment variables (",(0,r.kt)("inlineCode",{parentName:"li"},"AWS_ACCESS_KEY_ID"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"AWS_SECRET_ACCESS_KEY"),")"),(0,r.kt)("li",{parentName:"ol"},"SSO credentials from the token cache"),(0,r.kt)("li",{parentName:"ol"},"Web identity token credentials (including running in an Amazon EKS cluster using IAM roles for service accounts)"),(0,r.kt)("li",{parentName:"ol"},"Shared credentials and config ini files (",(0,r.kt)("inlineCode",{parentName:"li"},"~/.aws/credentials"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"~/.aws/config"),")"),(0,r.kt)("li",{parentName:"ol"},"Amazon Elastic Container Service (Amazon ECS) task metadata service"),(0,r.kt)("li",{parentName:"ol"},"Amazon Elastic Compute Cloud (Amazon EC2) instance metadata service")),(0,r.kt)("p",null,"We recommend that you don't hard-code long lived AWS credentials in your production Backstage application configuration. Hard-coding credentials is risky and might expose your access key ID and secret access key."),(0,r.kt)("p",null,"Instead, we recommend that you use short lived AWS credentials for your production Backstage application by deploying it to Amazon ECS, Amazon Elastic Kubernetes Service (Amazon EKS), or Amazon EC2. For more information about deploying Backstage to Amazon EKS using a Helm chart or to Amazon ECS on AWS Fargate using the AWS Cloud Development Kit (CDK), see ",(0,r.kt)("a",{parentName:"p",href:"https://backstage.io/docs/deployment/"},"Deploying Backstage")," in the Backstage documentation."),(0,r.kt)("p",null,"To use multiple AWS accounts with your Backstage app or to explicitly configure credentials for an AWS account, you can configure AWS accounts in your Backstage app's configuration.\nFor example, to configure an AWS account to use with the Terraform backend plugin which requires using an IAM role to retrieve credentials, add the following to your Backstage app-config.yaml file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"aws:\n  accounts:\n    - accountId: '111111111111'\n      roleName: 'my-iam-role-name'\n")),(0,r.kt)("p",null,"For more account configuration examples, see the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@backstage/integration-aws-node"},"Backstage integration-aws-node package documentation"),"."),(0,r.kt)("h2",{id:"iam-permissions"},"IAM permissions"),(0,r.kt)("p",null,"The Terraform backend plugin requires the AWS identity that it uses to have the following IAM permissions for getting tfstate files from S3:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"s3:GetObject"),(0,r.kt)("li",{parentName:"ul"},"s3:ListObjectsV2")))}u.isMDXComponent=!0}}]);