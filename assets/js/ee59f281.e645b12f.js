"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[8730],{12890:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/my-app-4fd46870df4fab797e1b7f7862bebace.png"},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>t});var i=n(96540);const r={},a=i.createContext(r);function o(e){const s=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:s},e.children)}},33449:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/my-app-repo-bb4d8740fb103272bb6fc355d14260f5.png"},76323:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"idpbuilder/usage","title":"Using IDPBuilder","description":"Using IDPBuilder","source":"@site/docs/idpbuilder/usage.md","sourceDirName":"idpbuilder","slug":"/idpbuilder/usage","permalink":"/docs/idpbuilder/usage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Using IDPBuilder","title":"Using IDPBuilder","index":4},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/docs/idpbuilder/installation"},"next":{"title":"Customizing idpbuilder","permalink":"/docs/idpbuilder/override"}}');var r=n(74848),a=n(28453);const o=n.p+"assets/images/color-output-56c26ee92dd17a246966df3dbe84e70a.png",t={sidebar_position:4,description:"Using IDPBuilder",title:"Using IDPBuilder",index:4},c=void 0,l={},d=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Example commands",id:"example-commands",level:2},{value:"Create",id:"create",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3},{value:"Gitea Integration",id:"gitea-integration",level:2},{value:"Custom Packages",id:"custom-packages",level:2},{value:"Workflows",id:"workflows",level:2},{value:"Exposing Services",id:"exposing-services",level:2},{value:"Running IDPBuilder on a remote host",id:"running-idpbuilder-on-a-remote-host",level:2},{value:"Option 1: SSH Port forwarding",id:"option-1-ssh-port-forwarding",level:3},{value:"Option 2: Changing the ingress host",id:"option-2-changing-the-ingress-host",level:3}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=s;return i||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,r.jsx)(s.p,{children:"The most basic command which creates a Kubernetes Cluster (Kind cluster) with the core packages installed."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create\n"})}),"\n",(0,r.jsx)(s.p,{children:"Once idpbuilder finishes provisioning cluster and packages, you can access GUIs by going to the following addresses in your browser."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["ArgoCD: ",(0,r.jsx)(s.a,{href:"https://argocd.cnoe.localtest.me:8443/",children:"https://argocd.cnoe.localtest.me:8443/"})]}),"\n",(0,r.jsxs)(s.li,{children:["Gitea: ",(0,r.jsx)(s.a,{href:"https://gitea.cnoe.localtest.me:8443/",children:"https://gitea.cnoe.localtest.me:8443/"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"You can obtain credentials for them by running the following command:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder get secrets\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Color Output"}),(0,r.jsxs)(s.p,{children:["idpbuilder supports colored output with the ",(0,r.jsx)(s.code,{children:"--color"})," flag."]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create --color\n"})}),(0,r.jsx)("img",{src:o,width:"60%",height:"60%"})]}),"\n",(0,r.jsx)(s.h2,{id:"example-commands",children:"Example commands"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["For more advanced use cases, check out the ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks",children:"Stacks Repository"}),"."]})}),"\n",(0,r.jsx)(s.h3,{id:"create",children:"Create"}),"\n",(0,r.jsxs)(s.p,{children:["Specify the kubernetes version by using the ",(0,r.jsx)(s.code,{children:"--kube-version"})," flag. Supported versions are available ",(0,r.jsx)(s.a,{href:"https://github.com/kubernetes-sigs/kind/releases",children:"here"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create --kube-version v1.27.3\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Specify your own kind configuration file, use the ",(0,r.jsx)(s.code,{children:"--kind-config"})," flag."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create --build-name local --kind-config ./my-kind.yaml\n"})}),"\n",(0,r.jsx)(s.p,{children:"Override ArgoCD configmap."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create --package-custom-file=argocd:path/to/argocd-cm.yaml\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Example Contents of argocd-cm.yaml"}),(0,r.jsx)(s.p,{children:"This configuration allows for anonymous login"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    # Labels below are required by ArgoCD\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\n    Test: Data\n  name: argocd-cm\ndata:\n  # Enables anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.yaml.\n  users.anonymous.enabled: "true"\n  application.resourceTrackingMethod: annotation\n  resource.exclusions: |\n    - kinds:\n        - ProviderConfigUsage\n      apiGroups:\n        - "*"\n'})})]}),"\n",(0,r.jsxs)(s.p,{children:["Use a public repository to pull extra packages. See ",(0,r.jsx)(s.a,{href:"#custom-packages",children:"this section"})," for more information."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create -p https://github.com/cnoe-io/stacks//basic/package1\n"})}),"\n",(0,r.jsx)(s.p,{children:"Use a private repository to pull extra packages."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ git clone https://github.com/cnoe-io/stacks-private\n$ idpbuilder create -p ./stacks-private/basic/package1\n"})}),"\n",(0,r.jsx)(s.p,{children:"Increase the verbosity of idpbuilder for troubleshooting."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create -l debug\n"})}),"\n",(0,r.jsx)(s.p,{children:"For available flags and subcommands:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder create --help\n"})}),"\n",(0,r.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,r.jsxs)(s.p,{children:["Get all relevant secrets. See ",(0,r.jsx)(s.a,{href:"/docs/intro/idpbuilder/how-it-works#getting-relevant-secrets",children:"this section"})," for more information."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder get secrets\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get secrets for a package named ",(0,r.jsx)(s.code,{children:"gitea"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder get secrets -p gitea\n"})}),"\n",(0,r.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsxs)(s.p,{children:["Delete a cluster named ",(0,r.jsx)(s.code,{children:"localdev"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ idpbuilder delete --name localdev\n"})}),"\n",(0,r.jsx)(s.h2,{id:"gitea-integration",children:"Gitea Integration"}),"\n",(0,r.jsxs)(s.p,{children:["idpbuilder creates an internal ",(0,r.jsx)(s.a,{href:"https://about.gitea.com/",children:"Gitea"})," server (accessible from your laptop and kind cluster only).\nThis can be used for various purposes such as sources for ArgoCD, container registry, and more.\nTo facilitate interactions with Gitea, idpbuilder creates a token with administrator scope, then stores it in a Kubernetes secret."]}),"\n",(0,r.jsx)(s.p,{children:"The token can be obtained by running the following command:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"# print all secrets associated with gitea\n$ idpbuilder get secrets -p gitea\n\n# get token only\n$ idpbuilder get secrets -p gitea -o json | jq  -r '.[0].data.token\n\n"})}),"\n",(0,r.jsx)(s.p,{children:"Here are a some examples for using the token:"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Create a Gitea Organization"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ TOKEN=$(idpbuilder get secrets -p gitea -o json | jq  -r '.[0].data.token' )\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'$ curl -k -X POST \\\n  https://gitea.cnoe.localtest.me:8443/api/v1/orgs \\\n  -H \'Content-Type: application/json\' \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{"description": "my-org", "email": "my-org@my.m", "full_name": "my-org", "username": "my-org"}\'\n'})})]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Create a Gitea User"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'$ TOKEN=$(idpbuilder get secrets -p gitea -o json | jq  -r \'.[0].data.token\' )\n$ curl -k -X POST \\\n  https://gitea.cnoe.localtest.me:8443/api/v1/admin/users \\\n  -H \'Content-Type: application/json\' \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{"email": "my-org@my.m", "full_name": "user one", "username": "user1", "password": "password", "must_change_password": true}\'\n'})})]}),"\n",(0,r.jsx)(s.h2,{id:"custom-packages",children:"Custom Packages"}),"\n",(0,r.jsxs)(s.p,{children:["Idpbuilder supports specifying custom packages using the flag ",(0,r.jsx)(s.code,{children:"-p"})," flag. This flag expects a directory (local or remote) containing ArgoCD application files and / or ArgoCD application set files. In case of a remote directory, it must be a directory in a git repository, and the URL format must be a ",(0,r.jsx)(s.a,{href:"https://github.com/kubernetes-sigs/kustomize/blob/master/examples/remoteBuild.md",children:"kustomize remote URL format"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Examples of using custom packages are available in the ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks",children:"stacks repository"}),". Let's take a look at ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/tree/main/basic",children:"this example"}),". This defines two custom package directories to deploy to the cluster."]}),"\n",(0,r.jsx)(s.p,{children:"To deploy these packages, run the following command:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ ./idpbuilder create \\\n  -p https://github.com/cnoe-io/stacks//basic/package1 \\\n  -p https://github.com/cnoe-io/stacks//basic/package2\n"})}),"\n",(0,r.jsx)(s.p,{children:"Alternatively, you can use the local directory format."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"# clone the stacks repository\n$ git clone https://github.com/cnoe-io/stacks.git\n\n$ cd stacks\n# run idpbuilder against the local directory\n$ ./idpbuilder create -p examples/basic/package1  -p examples/basic/package2\n"})}),"\n",(0,r.jsx)(s.p,{children:"Running this command should create three additional ArgoCD applications in your cluster."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"$ kubectl get Applications -n argocd  -l example=basic\nNAME         SYNC STATUS   HEALTH STATUS\nguestbook    Synced        Healthy\nguestbook2   Synced        Healthy\nmy-app       Synced        Healthy\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Let's break this down. The ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/tree/main/basic/package1",children:"first package directory"})," defines an application. This corresponds to the ",(0,r.jsx)(s.code,{children:"my-app"})," application above. In this application, we want to deploy manifests from local machine in GitOps way."]}),"\n",(0,r.jsxs)(s.p,{children:["The directory contains an ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/blob/main/basic/package1/app.yaml",children:"ArgoCD application file"}),".  This is a normal ArgoCD application file except for one field."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"apiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    repoURL: cnoe://manifests\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"cnoe://"})," prefix in the ",(0,r.jsx)(s.code,{children:"repoURL"})," field indicates that we want to sync from a local directory.\nValues after ",(0,r.jsx)(s.code,{children:"cnoe://"})," is treated as a relative path from this file. In this example,\nwe are instructing idpbuilder to make ArgoCD sync from files in the ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/tree/main/basic/package1/manifests",children:"manifests directory"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"As a result the following actions were taken by idpbuilder:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Create a Gitea repository."}),"\n",(0,r.jsx)(s.li,{children:"Fill the repository with contents from the manifests directory."}),"\n",(0,r.jsx)(s.li,{children:"Update the Application spec to use the newly created repository."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["You can verify this by going to this address in your browser: ",(0,r.jsx)(s.a,{href:"https://gitea.cnoe.localtest.me:8443/giteaAdmin/idpbuilder-localdev-my-app-manifests",children:"https://gitea.cnoe.localtest.me:8443/giteaAdmin/idpbuilder-localdev-my-app-manifests"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"img.png",src:n(33449).A+"",width:"1003",height:"384"})}),"\n",(0,r.jsxs)(s.p,{children:["This is the repository that corresponds to the ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/tree/main/basic/package1/manifests",children:"manifests"})," folder.\nIt contains a file called ",(0,r.jsx)(s.code,{children:"alpine.yaml"}),", synced from the ",(0,r.jsx)(s.code,{children:"manifests"})," directory above."]}),"\n",(0,r.jsxs)(s.p,{children:["You can also view the updated Application spec by going to this address: ",(0,r.jsx)(s.a,{href:"https://argocd.cnoe.localtest.me:8443/applications/argocd/my-app",children:"https://argocd.cnoe.localtest.me:8443/applications/argocd/my-app"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"myapp",src:n(12890).A+"",width:"1065",height:"405"})}),"\n",(0,r.jsx)(s.p,{children:"The second package directory defines two normal ArgoCD applications referencing a remote repository.\nThey are applied as-is."}),"\n",(0,r.jsx)(s.h2,{id:"workflows",children:"Workflows"}),"\n",(0,r.jsxs)(s.p,{children:["In some situations, you need to run imperative jobs such as creating users in your service, managing secrets, or calling APIs.\nArgoCD ",(0,r.jsx)(s.a,{href:"https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/",children:"Resource Hooks"})," are perfect for these scenarios.\nThese hooks allow you to execute imperative workflows at various stages of the ArgoCD sync process."]}),"\n",(0,r.jsxs)(s.p,{children:["For example, you can create a Kubernetes job that runs after a PostgreSQL database is created and ready by using the ",(0,r.jsx)(s.code,{children:"PostSync"})," hook. Here's an example:"]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Example PostgreSQL User Creation Hook"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: create-db-user\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: create-user\n        image: bitnami/postgresql:latest\n        command: [\"/bin/bash\", \"-c\"]\n        args:\n        - |\n          PGPASSWORD=$POSTGRES_PASSWORD psql -h postgresql -U postgres <<'EOF'\n            DO $$ \n            BEGIN\n              IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'myapp') THEN\n                CREATE USER myapp WITH PASSWORD 'mypassword';\n                GRANT ALL PRIVILEGES ON DATABASE mydatabase TO myapp;\n              END IF;\n            END\n            $$;\n          EOF\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgresql\n              key: postgres-password\n      restartPolicy: Never\n  backoffLimit: 3\n"})})]}),"\n",(0,r.jsxs)(s.p,{children:["More complex examples are available ",(0,r.jsx)(s.a,{href:"https://github.com/cnoe-io/stacks/blob/main/ref-implementation/keycloak/manifests/keycloak-config.yaml",children:"here"})]}),"\n",(0,r.jsx)(s.h2,{id:"exposing-services",children:"Exposing Services"}),"\n",(0,r.jsxs)(s.p,{children:["Idpbuilder comes with ",(0,r.jsx)(s.a,{href:"https://github.com/kubernetes/ingress-nginx",children:"ingress-nginx"}),", and this is meant to be used as an easy way to expose services to the outside world.\nSee ",(0,r.jsx)(s.a,{href:"/docs/intro/idpbuilder/how-it-works#networking",children:"the networking overview section"}),"   for more information.\nBy default, idpbuilder exposes the ingress-nginx service on host port 8443 and Kubernetes Ingress objects are created for core packages.\nFor example, an ingress object for Gitea looks something like this:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nspec:\n  ingressClassName: nginx\n  rules:\n    - host: gitea.cnoe.localtest.me\n      http:\n        paths:\n          - path: /\n            backend:\n              service:\n                name: my-gitea-http\n"})}),"\n",(0,r.jsxs)(s.p,{children:["With this configuration, nginx routes traffic to Gitea service when http requests are made for ",(0,r.jsx)(s.code,{children:"gitea.cnoe.localtest.me"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Similarly, you can expose your own service by defining an ingress object.\nFor example, to expose a service named my-service at ",(0,r.jsx)(s.code,{children:"my-service.cnoe.localtest.me"}),", the ingress object may look something like this."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-service\nspec:\n  ingressClassName: nginx\n  rules:\n    - host: my-service.cnoe.localtest.me\n      http:\n        paths:\n          - backend:\n              service:\n                name: my-service\n                port:\n                  number: 80\n            path: /\n            pathType: Prefix\n"})}),"\n",(0,r.jsx)(s.h2,{id:"running-idpbuilder-on-a-remote-host",children:"Running IDPBuilder on a remote host"}),"\n",(0,r.jsx)(s.h3,{id:"option-1-ssh-port-forwarding",children:"Option 1: SSH Port forwarding"}),"\n",(0,r.jsx)(s.p,{children:"This option is the most flexible and involves using an ssh connection to forward traffic from local ports to the server where IDPBuilder was run.\nFirst create your cluster on the server:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"user@server:~/$ idpbuilder create\n"})}),"\n",(0,r.jsx)(s.p,{children:"Once your cluster is created we need to configure our port forwards:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"user@local:~/$ ssh -L 8443:server:8443 -L 32222:server:32222 user@server\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"-L 8443:server:8443"})," adds portforwarding for the ingress."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"-L 32222:server:32222"})," adds portforwarding for the gitea ssh port."]}),"\n",(0,r.jsx)(s.p,{children:"If you want to use kubectl on your local machine first find the port the kube-api is exposed on:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"user@server:~/$ idpbuilder get clusters\nNAME       EXTERNAL-PORT   KUBE-API                  TLS     KUBE-PORT   NODES\nlocaldev   8443            https://127.0.0.1:36091   false   6443        localdev-control-plane\n"})}),"\n",(0,r.jsx)(s.p,{children:"In this case it is exposed on 36091. Then add the following to your ssh command:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"-L 36091:server:36091"})}),"\n",(0,r.jsx)(s.p,{children:"Finally copy the kube config from the server to the local machine:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"user@local:~/$ mkdir -p ~/.kube\nuser@local:~/$ scp user@server:~/.kube/config ~/.kube/config\n"})}),"\n",(0,r.jsx)(s.h3,{id:"option-2-changing-the-ingress-host",children:"Option 2: Changing the ingress host"}),"\n",(0,r.jsx)(s.p,{children:"If you only need remote access to the ingress you can build your remote cluster using the following options:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"user@server:~/$ idpbuilder create --host SERVER.DOMAIN.NAME.HERE --use-path-routing\n"})}),"\n",(0,r.jsxs)(s.p,{children:["note that this doesn't work with the ",(0,r.jsx)(s.code,{children:"--dev-password"})," flag."]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);